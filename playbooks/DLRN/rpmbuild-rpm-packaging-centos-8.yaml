---
- hosts: all
  name: Playbook for DLRN-rpmbuild-rpm-packaging-centos-8 job
  tasks:
    - include_tasks: setup_mock.yaml

    - name: run DLRN
      changed_when: true
      shell:
        cmd: |
          set +e
          # Setup virtualenv with tox and use it
          tox -epy36 --notest
          . .tox/py36/bin/activate
          # Use latest pymod2pkg from Git, to avoid waiting for new releases
          pip install --upgrade git+https://opendev.org/openstack/pymod2pkg
          # Prepare config
          if [[ "{{ zuul.branch }}" =~ stable/ ]]; then    # stable branch
              repo_branch=$(sed "s#stable/##" <<< "{{ zuul.branch }}")
              baseurl="https://centos8-rpm-packaging-ci.rdoproject.org/$repo_branch/repos/"
              use_version_from_spec="1"
          else
              # master
              baseurl="https://centos8-rpm-packaging-ci.rdoproject.org/repos/"
              use_version_from_spec="1"
          fi

          repo="http://opendev.org/openstack/rpm-packaging"
          directory="/openstack"
          skip="openstack-macros"
          pkginfo_driver="dlrn.drivers.gitrepo.GitRepoDriver"
          branch="{{ zuul.branch }}"
          target=centos8

          # Update the configuration
          sed -i "s%#repo=.*%repo=$repo%" projects.ini
          sed -i "s%#directory=.*%directory=$directory%" projects.ini
          sed -i "s%#skip=.*%skip=$skip%" projects.ini
          sed -i "s%#use_version_from_spec=.*%use_version_from_spec=$use_version_from_spec%" projects.ini
          sed -i "s%#keep_tarball=.*%keep_tarball=1%" projects.ini
          sed -i "s%pkginfo_driver=.*%pkginfo_driver=$pkginfo_driver%" projects.ini
          sed -i "s%baseurl=.*%baseurl=$baseurl%" projects.ini
          sed -i "s%source=.*%source=$branch%" projects.ini
          sed -i "s%distro=.*%distro=$branch%" projects.ini
          sed -i "s%target=.*%target=$target%" projects.ini

          # Prepare directories
          mkdir -p data/repos

          if [ -d "{{ ansible_user_dir }}/{{ zuul.projects['opendev.org/openstack/rpm-packaging'].src_dir }}" ]; then
            ln -s "{{ ansible_user_dir }}/{{ zuul.projects['opendev.org/openstack/rpm-packaging'].src_dir }}" data/package_info
          else
            # We are outside the gate, just do a regular git clone
            pushd data/
            # rm -rf first for idempotency
            rm -rf package_info
            git clone "https://opendev.org/openstack/rpm-packaging" package_info
            cd package_info
            git checkout $branch
            popd
          fi

          # Find out which packages are being tested
          pushd data/package_info
          CHANGED_FILES=$(git diff --name-only --diff-filter=ACMTR HEAD~1)
          PACKAGES_TO_BUILD=""
          for spec in $CHANGED_FILES; do
            filename=$(echo $spec | awk -F/ '{print $NF}')
            extension=$(echo $filename | awk -F. '{print $NF}')
            if [ "$extension" = "j2" ]; then
                # Remove the .spec.j2 extension
                PACKAGES_TO_BUILD="$PACKAGES_TO_BUILD --package-name $(echo $filename | awk 'BEGIN{FS=OFS="."}{NF--; NF--; print}')"
            fi
          done
          popd
          if [ ! -n "$PACKAGES_TO_BUILD" ]; then
            exit 0
          fi

          TIMEOUT="{{ zuul.timeout | default('10800') }}"
          timeout --signal=SIGKILL $TIMEOUT dlrn --config-file projects.ini --head-only $PACKAGES_TO_BUILD --dev --local --verbose-build --sequential
          ret=$?

          mkdir -p logs
          rsync -avzr data/repos logs/centos8
          # Clean up mock cache, just in case there is a change for the next run
          mock -r data/dlrn-1.cfg --scrub=all
          exit $ret
        chdir: "{{ ansible_user_dir }}/{{ zuul.projects['softwarefactory-project.io/DLRN'].src_dir }}"
      environment:
        LANG: 'en_US.UTF-8'
