- hosts: all
  name: playbook for rdoinfo-DLRN-check
  tasks:
    - name: link rdoinfo dir to /tmp/rdoinfo
      file:
        src: "{{ ansible_user_dir }}/{{ zuul.projects['review.rdoproject.org/rdoinfo'].src_dir }}"
        dest: /tmp/rdoinfo
        owner: '{{ ansible_user }}'
        group: '{{ ansible_user }}'
        state: link

    - name: Copy rdoinfo-DLRN.sh script
      copy:
        src: rdoinfo-DLRN.sh
        dest: '{{ ansible_user_dir }}/rdoinfo-DLRN.sh'
        owner: '{{ ansible_user }}'
        group: '{{ ansible_user }}'
        mode: 0755

    - name: Setup deps repo for mock
      get_url:
        url: https://trunk.rdoproject.org/centos8-master/delorean-deps.repo
        dest: /etc/yum.repos.d/delorean-deps.repo
      become: true
      when:
        - ansible_distribution == "CentOS"
        - ansible_distribution_major_version == '8'

    - name: Ensure bindep.txt dependencies are installed
      include_role:
        name: bindep
      vars:
        bindep_dir: "{{ ansible_user_dir }}/{{ zuul.projects['softwarefactory-project.io/DLRN'].src_dir }}"

    - name: Remove deps repo
      file:
        path: /etc/yum.repos.d/delorean-deps.repo
        state: absent
      become: true
      when:
        - ansible_distribution == "CentOS"
        - ansible_distribution_major_version == '8'

    - name: Update ca-certificates package in CentOS 7
      package:
        name: ca-certificates
        state: latest
      become: true
      when:
        - ansible_distribution == "CentOS"
        - ansible_distribution_major_version == '7'

    - name: Ensure user in mock group
      user:
        name: "{{ ansible_user }}"
        groups: mock
        append: true
      become: true

    - name: Set up mock configuration
      shell:
        cmd: |
          cat << EOF | tee /etc/mock/site-defaults.cfg
          config_opts['use_bootstrap'] = False
          config_opts['dnf_warning'] = False
          EOF
      become: true
      changed_when: true

    - name: Build packages for tags being updated
      shell:
        cmd: |
          set +e -x
          virtualenv --system-site-packages .venv
          . .venv/bin/activate
          pip install rdopkg

          export CENTOS_VERS="{{  centos_version | default('centos7') }}"

          CURRENT_MASTER_TAG="zed-uc"

          PACKAGES_UPDATED_MASTER=""
          PACKAGES_UPDATED_QUEENS=""
          PACKAGES_UPDATED_ROCKY=""
          PACKAGES_UPDATED_STEIN=""
          PACKAGES_UPDATED_TRAIN=""
          PACKAGES_UPDATED_USSURI=""
          PACKAGES_UPDATED_VICTORIA=""
          PACKAGES_UPDATED_WALLABY=""

          TAGS_DIFF=$(rdopkg info-tags-diff .)

          while read line; do
              PKGNAME=$(awk '{print $1}' <<< $line)
              if [ "${CENTOS_VERS}" = "centos9" ]; then
                  if [[ -n $(echo "$line" | grep -w $CURRENT_MASTER_TAG) ]]; then
                      PACKAGES_UPDATED_MASTER="$PACKAGES_UPDATED_MASTER $PKGNAME"
                  fi
                  if [[ -n $(echo "$line" | grep -w yoga) ]]; then
                      PACKAGES_UPDATED_YOGA="$PACKAGES_UPDATED_YOGA $PKGNAME"
                  fi
                  if [[ -n $(echo "$line" | grep -w xena) ]]; then
                      PACKAGES_UPDATED_XENA="$PACKAGES_UPDATED_XENA $PKGNAME"
                  fi
                  if [[ -n $(echo "$line" | grep -w wallaby) ]]; then
                      PACKAGES_UPDATED_WALLABY="$PACKAGES_UPDATED_WALLABY $PKGNAME"
                  fi
              fi
              if [ "${CENTOS_VERS}" = "centos8" ]; then
                  if [[ -n $(echo "$line" | grep -w $CURRENT_MASTER_TAG) ]]; then
                      PACKAGES_UPDATED_MASTER="$PACKAGES_UPDATED_MASTER $PKGNAME"
                  fi
                  if [[ -n $(echo "$line" | grep -w yoga) ]]; then
                      PACKAGES_UPDATED_YOGA="$PACKAGES_UPDATED_YOGA $PKGNAME"
                  fi
                  if [[ -n $(echo "$line" | grep -w xena) ]]; then
                      PACKAGES_UPDATED_XENA="$PACKAGES_UPDATED_XENA $PKGNAME"
                  fi
                  if [[ -n $(echo "$line" | grep -w wallaby) ]]; then
                      PACKAGES_UPDATED_WALLABY="$PACKAGES_UPDATED_WALLABY $PKGNAME"
                  fi
                  if [[ -n $(echo "$line" | grep -w victoria) ]]; then
                      PACKAGES_UPDATED_VICTORIA="$PACKAGES_UPDATED_VICTORIA $PKGNAME"
                  fi
                  if [[ -n $(echo "$line" | grep -w ussuri) ]]; then
                      PACKAGES_UPDATED_USSURI="$PACKAGES_UPDATED_USSURI $PKGNAME"
                  fi
                  if [[ -n $(echo "$line" | grep -w train) ]]; then
                      PACKAGES_UPDATED_TRAIN="$PACKAGES_UPDATED_TRAIN $PKGNAME"
                  fi
              fi
              if [ "${CENTOS_VERS}" = "centos7" ]; then
                  if [[ -n $(echo "$line" | grep -w train) ]]; then
                      PACKAGES_UPDATED_TRAIN="$PACKAGES_UPDATED_TRAIN $PKGNAME"
                  fi
              fi
          done <<< "${TAGS_DIFF}"

          pushd "{{ ansible_user_dir }}/{{ zuul.projects['softwarefactory-project.io/DLRN'].src_dir }}"
          # Create log directory always
          mkdir -p logs
          ret=0
          TIMEOUT="{{ zuul.timeout | default('10800') }}"
          if [ -n "${PACKAGES_UPDATED_MASTER}" ]; then
              timeout --signal=SIGKILL $TIMEOUT  {{ ansible_user_dir }}/rdoinfo-DLRN.sh $CURRENT_MASTER_TAG "${PACKAGES_UPDATED_MASTER}" "${CENTOS_VERS}"
              ret1=$?
              if [ $ret1 -ne 0 ]; then
                  ret=$ret1
              fi
              # The data/ contents have been archived already, remove to avoid issues with the next branch
              rm -rf data
              sudo rm -rf /var/cache/mock/*
          fi
          if [ -n "${PACKAGES_UPDATED_YOGA}" ]; then
              timeout --signal=SIGKILL $TIMEOUT  {{ ansible_user_dir }}/rdoinfo-DLRN.sh yoga "${PACKAGES_UPDATED_YOGA}" "${CENTOS_VERS}"
              ret1=$?
              if [ $ret1 -ne 0 ]; then
                  ret=$ret1
              fi
              # The data/ contents have been archived already, remove to avoid issues with the next branch
              rm -rf data
              sudo rm -rf /var/cache/mock/*
          fi
          if [ -n "${PACKAGES_UPDATED_XENA}" ]; then
              timeout --signal=SIGKILL $TIMEOUT  {{ ansible_user_dir }}/rdoinfo-DLRN.sh xena "${PACKAGES_UPDATED_XENA}" "${CENTOS_VERS}"
              ret1=$?
              if [ $ret1 -ne 0 ]; then
                  ret=$ret1
              fi
              # The data/ contents have been archived already, remove to avoid issues with the next branch
              rm -rf data
              sudo rm -rf /var/cache/mock/*
          fi
          if [ -n "${PACKAGES_UPDATED_WALLABY}" ]; then
              timeout --signal=SIGKILL $TIMEOUT  {{ ansible_user_dir }}/rdoinfo-DLRN.sh wallaby "${PACKAGES_UPDATED_WALLABY}" "${CENTOS_VERS}"
              ret1=$?
              if [ $ret1 -ne 0 ]; then
                  ret=$ret1
              fi
              # The data/ contents have been archived already, remove to avoid issues with the next branch
              rm -rf data
              sudo rm -rf /var/cache/mock/*
          fi
          if [ -n "${PACKAGES_UPDATED_VICTORIA}" ]; then
              timeout --signal=SIGKILL $TIMEOUT  {{ ansible_user_dir }}/rdoinfo-DLRN.sh victoria "${PACKAGES_UPDATED_VICTORIA}" "${CENTOS_VERS}"
              ret1=$?
              if [ $ret1 -ne 0 ]; then
                  ret=$ret1
              fi
              # The data/ contents have been archived already, remove to avoid issues with the next branch
              rm -rf data
              sudo rm -rf /var/cache/mock/*
          fi
          if [ -n "${PACKAGES_UPDATED_USSURI}" ]; then
              timeout --signal=SIGKILL $TIMEOUT  {{ ansible_user_dir }}/rdoinfo-DLRN.sh ussuri "${PACKAGES_UPDATED_USSURI}" "${CENTOS_VERS}"
              ret1=$?
              if [ $ret1 -ne 0 ]; then
                  ret=$ret1
              fi
              # The data/ contents have been archived already, remove to avoid issues with the next branch
              rm -rf data
              sudo rm -rf /var/cache/mock/*
          fi
          if [ -n "${PACKAGES_UPDATED_TRAIN}" ]; then
              timeout --signal=SIGKILL $TIMEOUT {{ ansible_user_dir }}/rdoinfo-DLRN.sh train "${PACKAGES_UPDATED_TRAIN}" "${CENTOS_VERS}"
              ret1=$?
              if [ $ret1 -ne 0 ]; then
                  ret=$ret1
              fi
              # The data/ contents have been archived already, remove to avoid issues with the next branch
              rm -rf data
              sudo rm -rf /var/cache/mock/*
          fi
          if [ -n "${PACKAGES_UPDATED_STEIN}" ]; then
              timeout --signal=SIGKILL $TIMEOUT {{ ansible_user_dir }}/rdoinfo-DLRN.sh stein "${PACKAGES_UPDATED_STEIN}" "${CENTOS_VERS}"
              ret1=$?
              if [ $ret1 -ne 0 ]; then
                  ret=$ret1
              fi
              # The data/ contents have been archived already, remove to avoid issues with the next branch
              rm -rf data
              sudo rm -rf /var/cache/mock/*
          fi
          if [ -n "${PACKAGES_UPDATED_ROCKY}" ]; then
              timeout --signal=SIGKILL $TIMEOUT {{ ansible_user_dir }}/rdoinfo-DLRN.sh rocky "${PACKAGES_UPDATED_ROCKY}" "${CENTOS_VERS}"
              ret1=$?
              if [ $ret1 -ne 0 ]; then
                  ret=$ret1
              fi
              # The data/ contents have been archived already, remove to avoid issues with the next branch
              rm -rf data
              sudo rm -rf /var/cache/mock/*
          fi
          if [ -n "${PACKAGES_UPDATED_QUEENS}" ]; then
              timeout --signal=SIGKILL $TIMEOUT {{ ansible_user_dir }}/rdoinfo-DLRN.sh queens "${PACKAGES_UPDATED_QUEENS}" "${CENTOS_VERS}"
              ret1=$?
              if [ $ret1 -ne 0 ]; then
                  ret=$ret1
              fi
              # The data/ contents have been archived already, remove to avoid issues with the next branch
              rm -rf data
              sudo rm -rf /var/cache/mock/*
          fi
          popd

          exit $ret
        chdir: "{{ ansible_user_dir }}/{{ zuul.projects['review.rdoproject.org/rdoinfo'].src_dir }}"
      changed_when: true
      environment:
        LANG: 'en_US.UTF-8'
