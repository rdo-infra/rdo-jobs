- hosts: controller
  vars:
    framework_dir: "/home/zuul/src/github.com/openstack-k8s-operators/ci-framework"
    cifmw_parameters_file: "/home/zuul/vars.yaml"
    rdo_dir: "/home/zuul/src/review.rdoproject.org/rdo-jobs/playbooks/data_plane_adoption"
    cifmw_installyamls_repos: "/home/zuul/src/github.com/openstack-k8s-operators/install_yamls"
    cifwm_data_folder: "/home/zuul/ci-framework-data/artifacts/parameters"
    bootstrap_common_vars: "{{ rdo_dir }}/common_bootstrap_params.yml"
  tasks:
    - name: Install community.general collection
      ansible.builtin.command: ansible-galaxy collection install community.general

    - name: Create bootstrap_common_vars file
      ansible.builtin.template:
        src: "{{ playbook_dir }}/files/common_bootstrap_params.yml.j2"
        dest: "{{ bootstrap_common_vars }}"

    - name: Read bootstrap common vars
      ansible.builtin.include_vars: "{{{ framework_dir }}/{ bootstrap_common_vars }}"

    - name: Include dpa_cifmw_bootstrap_vars
      when: dpa_cifmw_bootstrap_vars is defined
      ansible.builtin.include_vars: "{{ framework_dir }}/{{ dpa_cifmw_bootstrap_vars }}"

    - name: Include cifmw_extras vars
      when: cifmw_extras is defined
      ansible.builtin.include_vars: "{{ framework_dir }}/{{ item }}"
      loop: "{{ cifmw_extras }}"

    - name: Prepare ci-framework environment and install openshift client
      ansible.builtin.include_role:
        name: cifmw_setup
        tasks_from: bootstrap
      tags: bootstrap

    - name: Dump parameters to a file to pass them easily to cifmw playbooks
      ansible.builtin.template:
        src: "{{ playbook_dir }}/files/ci_framework_params.yaml.j2"
        dest: "{{ cifmw_parameters_file }}"

    - name: Read cifmw_parameters_file file
      ansible.builtin.include_vars: "{{{ framework_dir }}/{{ cifmw_parameters_file }}"

    - name: Prepare openshift and libvirt environment
      ansible.builtin.include_role:
        name: cifmw_setup
        tasks_from: infra

    - name: Write content-provider vars to file if present
      when: cifmw_operator_build_output is defined and cifmw_operator_build_output
      block:
        - name: Set content-provider variables dictionary
          ansible.builtin.set_fact:
            cifmw_content_provider_params:
              cifmw_operator_build_output: "{{ cifmw_operator_build_output }}"
              cifmw_operator_build_meta_name: 'openstack-operator'

        - name: Write variables to cifmw custom params file
          ansible.builtin.lineinfile:
            path: "{{ cifwm_data_folder }}/custom-params.yml"
            line: "{{ cifmw_content_provider_params | to_nice_yaml }}"

    - name: Write build-push-openstack-operator-catalog vars to file if present
      when: operators_catalog_img is defined and operators_catalog_img and 'openstack-operator' in operators_catalog_img
      block:
        - name: Set content-provider variables dictionary
          ansible.builtin.set_fact:
            cifmw_content_provider_params:
              cifmw_operator_build_output:
                operators:
                  openstack-operator:
                    image_catalog: "{{ operators_catalog_img['openstack-operator'] }}"
              cifmw_operator_build_meta_name: 'openstack-operator'

        - name: Write variables to cifmw custom params file
          ansible.builtin.lineinfile:
            path: "{{ cifwm_data_folder }}/custom-params.yml"
            line: "{{ cifmw_content_provider_params | to_nice_yaml }}"

    - name: Install operators via ci-framework using edpm code
      ansible.builtin.include_role:
        name: cifmw_setup
        tasks_from: deploy-edpm

    - name: Copy kubeconfig to .kube folder where oc expects it
      ansible.builtin.copy:
        src: "{{ cifmw_openshift_kubeconfig }}"
        dest: "/home/zuul/.kube/config"
        remote_src: true

    - name: Make sure all Openstack operators are deployed
      ansible.builtin.shell: |
        set -o pipefail && \
        oc get csv -l operators.coreos.com/openstack-operator.openstack-operators -n "openstack-operators" --no-headers=true | grep -i "succeeded"
      register: operator_status
      until: operator_status.rc == 0
      changed_when: false
      retries: 30
      delay: 30

    - name: Get the name of the control plane deployed by 06-deploy-edpm.yml
      ansible.builtin.command: oc get -n openstack openstackcontrolplane -o name
      register: control_plane

    - name: Delete control plane deployed by 06-deploy-edpm.yml
      ansible.builtin.command: oc delete -n openstack "{{ control_plane.stdout }}"
