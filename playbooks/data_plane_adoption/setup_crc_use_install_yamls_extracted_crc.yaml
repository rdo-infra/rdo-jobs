---
- hosts: controller
  vars:
    framework_dir: "/home/zuul/src/github.com/openstack-k8s-operators/ci-framework"
    cifmw_parameters_file: "/home/zuul/vars.yaml"
    rdo_dir: "/home/zuul/src/review.rdoproject.org/rdo-jobs/playbooks/data_plane_adoption"
    cifmw_installyamls_repos: "/home/zuul/src/github.com/openstack-k8s-operators/install_yamls"
    cifwm_data_folder: "/home/zuul/ci-framework-data/artifacts/parameters"
    bootstrap_common_vars: "{{ rdo_dir }}/common_bootstrap_params.yml"
  tasks:
    - name: Install community.general collection
      ansible.builtin.command: ansible-galaxy collection install community.general

    - name: Create bootstrap_common_vars file
      ansible.builtin.template:
        src: "{{ playbook_dir }}/files/common_bootstrap_params.yml.j2"
        dest: "{{ bootstrap_common_vars }}"

    # FIXME: add `--tags bootstrap`
    - name: Prepare ci-framework environment and install openshift client
      ansible.builtin.shell:
        cmd: >
          ansible localhost -m include_role
          -a "name=cifmw_setup tasks_from=bootstrap.yml"
          -e "@{{ bootstrap_common_vars }}"
          {% if dpa_cifmw_bootstrap_vars is defined %}
          -e "@{{ dpa_cifmw_bootstrap_vars }}"
          {% endif %}
          {%- if cifmw_extras is defined %}
          {%-   for extra_vars in cifmw_extras %}
          -e "{{ extra_vars }}"
          {%-   endfor %}
          {%- endif %}
        chdir: "{{ framework_dir }}"

    - name: Dump parameters to a file to pass them easily to cifmw playbooks
      ansible.builtin.template:
        src: "{{ playbook_dir }}/files/ci_framework_params.yaml.j2"
        dest: "{{ cifmw_parameters_file }}"

    - name: Prepare openshift and libvirt environment
      ansible.builtin.shell:
        cmd: >
          ansible localhost -m include_role
          -a "name=cifmw_setup tasks_from=infra.yml"
          -e "@{{ cifmw_parameters_file }}"
          {%- if cifmw_extras is defined %}
          {%-   for extra_vars in cifmw_extras %}
          -e "{{ extra_vars }}"
          {%-   endfor %}
          {%- endif %}
        chdir: "{{ framework_dir }}"

    - name: Write content-provider vars to file if present
      when: cifmw_operator_build_output is defined and cifmw_operator_build_output
      block:
        - name: Set content-provider variables dictionary
          ansible.builtin.set_fact:
            cifmw_content_provider_params:
              cifmw_operator_build_output: "{{ cifmw_operator_build_output }}"
              cifmw_operator_build_meta_name: "openstack-operator"

        - name: Write variables to cifmw custom params file
          ansible.builtin.lineinfile:
            path: "{{ cifwm_data_folder }}/custom-params.yml"
            line: "{{ cifmw_content_provider_params | to_nice_yaml }}"

    - name: Write build-push-openstack-operator-catalog vars to file if present
      when: operators_catalog_img is defined and operators_catalog_img and 'openstack-operator' in operators_catalog_img
      block:
        - name: Set content-provider variables dictionary
          ansible.builtin.set_fact:
            cifmw_content_provider_params:
              cifmw_operator_build_output:
                operators:
                  openstack-operator:
                    image_catalog: "{{ operators_catalog_img['openstack-operator'] }}"
              cifmw_operator_build_meta_name: "openstack-operator"

        - name: Write variables to cifmw custom params file
          ansible.builtin.lineinfile:
            path: "{{ cifwm_data_folder }}/custom-params.yml"
            line: "{{ cifmw_content_provider_params | to_nice_yaml }}"

    # - name: Install operators via ci-framework using edpm code
    #   ansible.builtin.shell:
    #     cmd: >
    #       ansible-playbook -v playbooks/06-deploy-edpm.yml -e "@{{cifmw_parameters_file}}"
    #       {%- if cifmw_extras is defined %}
    #       {%-   for extra_vars in cifmw_extras %}
    #       -e "{{   extra_vars }}"
    #       {%-   endfor %}
    #       {%- endif %}
    #     chdir: "{{ framework_dir }}"

    - name: Run pre_deploy hooks
      when: cifmw_architecture_scenario is not defined
      ansible.builtin.shell:
        cmd: >
          ansible localhost -m include_role
          -a "name=run_hook tasks_from=pre_deploy.yml"
          -e "step=pre_deploy"
      args:
        chdir: "{{ framework_dir }}"

    - name: Install operators via ci-framework using edpm code
      ansible.builtin.shell:
        cmd: >
          ansible localhost -m include_role
          -a "name=cifmw_setup tasks_from=deploy-edpm.yml"
          -e "@{{ cifmw_parameters_file }}"
          {%- if cifmw_extras is defined %}
          {%-   for extra_vars in cifmw_extras %}
          -e "{{ extra_vars }}"
          {%-   endfor %}
          {%- endif %}
      args:
        chdir: "{{ framework_dir }}"

- name: Deploy NFS server on target nodes
  become: true
  hosts: "{{ groups[cifmw_nfs_target | default('computes')][0] | default([]) }}"
  tasks:
    - name: Run cifmw_nfs role
      when: cifmw_edpm_deploy_nfs | default(false)
      ansible.builtin.shell:
        cmd: >
          ansible localhost -m include_role
          -a "name=cifmw_setup tasks_from=cifmw_nfs.yml"
          -e "nftables_path=/etc/nftables"
          -e "nftables_conf=/etc/sysconfig/nftables.conf"
      args:
        chdir: "{{ framework_dir }}"

- name: Clear ceph target hosts facts to force refreshing in HCI deployments
  hosts: "{{ cifmw_ceph_target | default('computes') }}"
  tasks:
    # end_play will end only current play, not the main edpm-deploy.yml
    - name: Early end if architecture deploy
      when: cifmw_architecture_scenario is defined
      ansible.builtin.meta: end_play

    - name: Clear ceph target hosts facts
      when: cifmw_edpm_deploy_hci | default(false)
      ansible.builtin.meta: clear_facts

- name: Deploy ceph using hooks
  hosts: "{{ cifmw_target_host | default('controller') }}"
  vars:
    post_ceph:
      - name: 80 Run Ceph hook playbook
        type: playbook
        source: ceph.yml
    _deploy_ceph: >-
      {{
        (cifmw_edpm_deploy_hci | default(false) | bool) and
        cifmw_architecture_scenario is undefined
      }}
  tasks:
    - name: Run post_ceph hooks - deploy Ceph on target nodes
      ansible.builtin.shell:
        cmd: >
          ansible localhost -m import_role
          -a "name=run_hook"
          -e "storage_network_range=172.18.0.0/24"
          -e "storage_mgmt_network_range=172.20.0.0/24"
          -e "_deploy_ceph={{ _deploy_ceph | bool }}"
          -e "step=post_ceph"
          -e "post_ceph={{ post_ceph }}"
      args:
        chdir: "{{ framework_dir }}"

- name: Continue HCI deploy
  hosts: "{{ cifmw_target_host | default('controller') }}"
  gather_facts: false
  tasks:
    - name: Continue HCI deploy
      ansible.builtin.include_role:
        name: cifmw_setup
        tasks_from: hci_deploy.yml

    - name: Copy kubeconfig to .kube folder where oc expects it
      ansible.builtin.copy:
        src: "{{ cifmw_openshift_kubeconfig }}"
        dest: "/home/zuul/.kube/config"
        remote_src: true

    - name: Make sure all Openstack operators are deployed
      ansible.builtin.shell: |
        set -o pipefail && \
        oc get csv -l operators.coreos.com/openstack-operator.openstack-operators -n "openstack-operators" --no-headers=true | grep -i "succeeded"
      register: operator_status
      until: operator_status.rc == 0
      changed_when: false
      retries: 30
      delay: 30

    - name: Get the name of the control plane deployed by 06-deploy-edpm.yml
      ansible.builtin.command: oc get -n openstack openstackcontrolplane -o name
      register: control_plane

    - name: Delete control plane deployed by 06-deploy-edpm.yml
      ansible.builtin.command: oc delete -n openstack "{{ control_plane.stdout }}"
