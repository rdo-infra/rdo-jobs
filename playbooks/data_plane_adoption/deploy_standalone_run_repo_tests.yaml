- hosts: controller
  gather_facts: false
  vars:
    dpa_dir: "{{ dpa_dir_override | default('/home/zuul/src/github.com/openstack-k8s-operators/data-plane-adoption') }}"
    rdo_dir: "/home/zuul/src/review.rdoproject.org/rdo-jobs/playbooks/data_plane_adoption"
    framework_dir: "/home/zuul/src/github.com/openstack-k8s-operators/ci-framework"
    source_mariadb_ip: 172.17.0.100
  tasks:
    - name: Create inventory to run tasks inside vm
      ansible.builtin.template:
        src: "{{ playbook_dir }}/files/standalone_vm_inventory.yaml.j2"
        dest: "/home/zuul/{{ standalone_vm_inventory | default('standalone_vm_inventory') }}"

    - name: Install collections to use nmcli and libvirt ansible modules
      ansible.builtin.command: ansible-galaxy collection install community.general community.libvirt

    - name: Write repo commands and deploy standalone using ci-framework without a vm
      block:
        - name: Write out the repo setup commands to file for standalone to use
          ansible.builtin.copy:
            dest: /home/zuul/cdn_subscription_repos.sh
            content: |
              subscription-manager repos --enable openstack-17.1-for-rhel-9-x86_64-rpms
              subscription-manager repos --enable rhceph-6-tools-for-rhel-9-x86_64-rpms
              subscription-manager repos --enable fast-datapath-for-rhel-9-x86_64-rpms
              subscription-manager repos --enable rhel-9-for-x86_64-highavailability-eus-rpms

        - name: Deploy the standalone with ci_framework_deploy_standalone_vm.yaml
          ansible.builtin.shell: >
            ansible-playbook {{ rdo_dir }}/ci_framework_deploy_standalone_vm.yaml -e "job_name={{ zuul.job }}"
            {% if dpa_standalone_ntp_server is defined %}
            -e ntp_override={{ dpa_standalone_ntp_server }}
            {% endif %}
            -e repo_setup_commands=/home/zuul/cdn_subscription_repos.sh
            -e "standalone_ip={{ standalone_ip }}" -e "standalone_gateway={{ standalone_gateway }}"
            -e "standalone_dns={{ standalone_dns | default(standalone_gateway) }}"
            -e "use_ceph={{ use_ceph | default('true') }}"
            -e "cloud_domain={{ cloud_domain | default('localdomain') }}"
            -e "enable_tls={{ enable_tls | default('false') }}"
          args:
            chdir: "{{ framework_dir }}"

    - name: Wait for standalone vm to be available
      ansible.builtin.wait_for:
        port: 22
        host: "{{ standalone_ip }}"
        delay: 10
        timeout: 300
      vars:
        ansible_user: root
        ansible_ssh_private_key_file: /home/zuul/src/github.com/openstack-k8s-operators/install_yamls/out/edpm/ansibleee-ssh-key-id_rsa

    - name: Accept standalone vm ssh host keys to avoid prompt connecting for the first time
      connection: local
      ansible.builtin.shell: |
        ssh-keygen -F {{ standalone_ip }} ||
          ssh-keyscan -H {{ standalone_ip }} >> ~/.ssh/known_hosts
      register: known_hosts_script
      changed_when: "'found' not in known_hosts_script.stdout"

    - name: Run test preparation in standalone vm
      ansible.builtin.shell:
        ansible-playbook {{ rdo_dir }}/standalone_prepare_tests.yaml -i /home/zuul/{{ standalone_vm_inventory | default("standalone_vm_inventory") }}

    - name: Place internal IP into vars.yaml for Mariadb
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        regexp: "'^source_mariadb_ip:'"
        value: "source_mariadb_ip: {{ source_mariadb_ip }}"

    - name: Place standalone_ip into vars.yaml for edpm, mariadb, ovndb
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        regexp: "'^{{ item }}:'"
        value: "{{ item }}: {{ standalone_ip }}"
      loop:
        - "edpm_node_ip"
        - "source_ovndb_ip"

    - name: Set EDPM node hostname in vars.yaml
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        regexp: "'^edpm_node_hostname:'"
        value: "edpm_node_hostname: standalone.{{ cloud_domain | default('localdomain') }}"

    - name: Set TLS Everywhere in vars.yaml
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        regexp: "'^enable_tlse:'"
        value: "enable_tlse: {{ enable_tls | default('false') }}"

    - name: Insert vars for data plane operator and os-net-config with zuul native standalone node
      ansible.builtin.blockinfile:
        marker_begin: "BEGIN os-net-config vars"
        marker_end: "END os-net-config vars"
        path: "{{ rdo_dir }}/vars.yaml"
        block: |
          dataplane_os_net_config_iface: nic2
          dataplane_public_iface: eth1
          dataplane_os_net_config_set_route: false

    - name: Read the standalone ssh key downloaded from standalone
      ansible.builtin.slurp:
        path: "{{ standalone_private_key | default('/home/zuul/src/github.com/openstack-k8s-operators/install_yamls/out/edpm/ansibleee-ssh-key-id_rsa') }}"
      register: standalone_key

    - name: Place standalone key into secrets.yaml
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/secrets.yaml"
        regexp: '^edpm_encoded_privatekey:'
        value: "edpm_encoded_privatekey: \"{{ standalone_key['content'] }}\""

    - name: Read the tripleo passwords downloaded from standalone
      ansible.builtin.slurp:
        path: /home/zuul/tripleo-standalone-passwords.yaml
      register: tripleo_passwords

    - name: Set tripleo passwords in secrets.yaml
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/secrets.yaml"
        regexp: "{{ item.key }}:"
        line: "{{ item.key }}: {{ tripleo_passwords['content'] | b64decode | regex_search(item.regex + ': (.+)', '\\1') | first }}"
      loop:
        - key: 'source_db_root_password'
          regex: 'MysqlRootPassword'
        - key: 'barbican_password'
          regex: 'BarbicanPassword'
        - key: 'glance_password'
          regex: 'GlancePassword'
        - key: 'placement_password'
          regex: 'PlacementPassword'
        - key: 'cinder_password'
          regex: 'CinderPassword'
        - key: 'neutron_password'
          regex: 'NeutronPassword'
        - key: 'heat_password'
          regex: 'HeatPassword'
        - key: 'heat_auth_encryption_key'
          regex: 'HeatAuthEncryptionKey'
        - key: 'manila_password'
          regex: 'ManilaPassword'
        - key: 'ironic_password'
          regex: 'IronicPassword'
        - key: 'nova_password'
          regex: 'NovaPassword'
        - key: 'octavia_password'
          regex: 'OctaviaPassword'
        - key: 'swift_password'
          regex: 'SwiftPassword'

    - name: Set standalone login var controller1_ssh in secrets.yaml
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/secrets.yaml"
        regexp: 'controller1_ssh:'
        value: "controller1_ssh: ssh -i {{ standalone_private_key | default('/home/zuul/src/github.com/openstack-k8s-operators/install_yamls/out/edpm/ansibleee-ssh-key-id_rsa') }} root@{{ standalone_ip }}"

    - name: Set ipa_ssh var in secrets.yaml
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/secrets.yaml"
        regexp: 'ipa_ssh:'
        value: "ipa_ssh: ssh -i {{ standalone_private_key | default('/home/zuul/src/github.com/openstack-k8s-operators/install_yamls/out/edpm/ansibleee-ssh-key-id_rsa') }} root@{{ standalone_ip }} podman exec -ti freeipa-server-container"

    - name: Install required packages
      become: true
      ansible.builtin.package:
        name:
          - python3
          - python3-pip

    - name: pip install openstackclient for keystone adoption on crc
      become: true
      ansible.builtin.pip:
        name: python-openstackclient
        executable: pip3

    - name: Fetch hash and set ci_testing_hash fact for periodic
      when: "'periodic' in zuul.job or (force_periodic|default(false)|bool)"
      block:
        - name: Fetch latest c9 or rhel9 antelope tag from dlrn
          when: dlrn_hash_tag is not defined
          ansible.builtin.uri:
            url: "https://{{ dpa_dlrn_server | default('trunk.rdoproject.org') }}/{{ dpa_dlrn_namespace | default('centos9-antelope') }}/{{ dpa_dlrn_tag | default('podified-ci-testing') }}/delorean.repo.md5"
            return_content: true
          register: latest_dlrn_tag
          until: latest_dlrn_tag.status == 200
          retries: 6
          delay: 5

        - name: Insert vars needed for periodic job into test vars.yaml
          ansible.builtin.blockinfile:
            marker_begin: "BEGIN periodic container vars"
            marker_end: "END periodic container vars"
            path: "{{ rdo_dir }}/vars.yaml"
            block: |
              periodic: true
              container_registry: "{{ dpa_container_registry | default('quay.rdoproject.org') }}"
              container_namespace: "{{ dpa_container_namespace | default('podified-antelope-centos9') }}"
              container_tag: {{ dlrn_hash_tag | default(latest_dlrn_tag.content) }}

        - name: Set timesync_ntp_servers if dpa_standalone_ntp_server set
          ansible.builtin.blockinfile:
            path: "{{ rdo_dir }}/vars.yaml"
            block: |
              timesync_ntp_servers:
                - hostname: {{ dpa_standalone_ntp_server }}
          when: dpa_standalone_ntp_server is defined

    - name: Store upstream dns server in vars.yaml if defined
      # we need to expose this so that the tests can then point the dnsmasq in
      # the controlplane to a working dns server to resolve names outside of
      # openstack
      when: upstream_control_plane_dns is defined
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        line: "upstream_dns: {{ upstream_control_plane_dns }}"

    - name: Set var to skip ansibleee csv patching
      when: dpa_skip_patch_csv is defined and dpa_skip_patch_csv
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        line: "skip_patching_ansibleee_csv: {{ dpa_skip_patch_csv | string | lower }}"

    - name: Check if edpm-ansible.yml file was created
      ansible.builtin.stat:
        path: "/home/zuul/ci-framework-data/artifacts/edpm-ansible.yml"
      register: edpm_ansible_file

    - name: Read edpm_ansible file and extract ansibleee_runner img
      when: edpm_ansible_file.stat.exists
      block:
        - name: Read file
          ansible.builtin.slurp:
            path: "/home/zuul/ci-framework-data/artifacts/edpm-ansible.yml"
          register: edpm_ansible_output

        - name: Extract ansiblee_runner img
          vars:
            edpm_ansible_dict: "{{ edpm_ansible_output['content'] | b64decode | from_yaml }}"
          ansible.builtin.set_fact:
            ansibleee_runner_img: "{{ edpm_ansible_dict['cifmw_update_containers_ansibleee_image_url'] }}"

        - name: Insert ansibleee_runner_img var into vars.yaml
          ansible.builtin.lineinfile:
            path: "{{ rdo_dir }}/vars.yaml"
            line: "ansibleee_runner_img: {{ ansibleee_runner_img }}"


    - name: Update sos-reports package to use it with must-gather
      delegate_to: standalone
      become: true
      ansible.builtin.dnf:
        name: sos
        state: latest

    - name: "Run data-plane-adoption tests from {{ dpa_dir }}"
      community.general.make:
        chdir: "{{ dpa_dir }}"
        target: "{{ dpa_test_suite | default('test-with-ceph') }}"
        params:
          TEST_CONFIG: "{{ dpa_test_ansible_cfg | default(rdo_dir  ~ '/ansible.cfg') }}"
          TEST_SECRETS: "{{ rdo_dir}}/secrets.yaml"
          TEST_VARS: "{{ rdo_dir }}/vars.yaml"
          TEST_INVENTORY: "tests/inventory.sample-crc-vagrant.yaml"
      register: make_res
      failed_when: '"failed=0" not in make_res.stdout_lines[-1]'

    - name: Unregister with subscription-manager when this was a CDN OSP 17.1 source job
      ansible.builtin.shell:
        ansible-playbook {{ rdo_dir }}/unregister_RH_subscription_standalone.yaml -i /home/zuul/{{ standalone_vm_inventory | default("standalone_vm_inventory") }}

    - name: Call test role
      when: "'periodic' in zuul.job or (force_periodic|default(false)|bool)"
      block:
        - name: Dump cifmw test operator parameters to a file
          ansible.builtin.template:
            src: "{{ playbook_dir }}/files/ci_framework_test_operator_params.yaml.j2"
            dest: "{{ cifmw_test_operator_parameters_file | default('/home/zuul/test_operator_vars.yaml')}}"

        - name: Call test role with ci_framework_call_test_role
          ansible.builtin.shell: >
            ansible-playbook {{ rdo_dir }}/ci_framework_call_test_role.yaml -e "job_name={{ zuul.job }}"
            -e "test_role={{ cifmw_run_test_role | default('tempest') }}"
            -e "@{{cifmw_test_operator_parameters_file | default('/home/zuul/test_operator_vars.yaml')}}"
          args:
            chdir: "{{ framework_dir }}"

    - name: Mark job as successful
      when: not force_job_failure | default(false)
      ansible.builtin.file:
        path: "{{ ansible_user_dir }}/cifmw-success"
        state: touch
