- hosts: controller
  gather_facts: false
  vars:
    dpa_dir: "/home/zuul/src/github.com/openstack-k8s-operators/data-plane-adoption"
    rdo_dir: "/home/zuul/src/review.rdoproject.org/rdo-jobs/playbooks/data_plane_adoption"
    framework_dir: "/home/zuul/src/github.com/openstack-k8s-operators/ci-framework"
  tasks:
    - name: Create inventory to run tasks inside vm
      ansible.builtin.template:
        src: "{{ playbook_dir }}/files/standalone_vm_inventory.yaml.j2"
        dest: "/home/zuul/{{ standalone_vm_inventory | default('standalone_vm_inventory') }}"

    - name: Install collections to use nmcli and libvirt ansible modules
      ansible.builtin.command: ansible-galaxy collection install community.general community.libvirt

    - name: Create vm and deploy standalone using ci-framework
      when: skip_standalone_vm is not defined
      ansible.builtin.shell: >
        ansible-playbook {{ rdo_dir }}/ci_framework_create_standalone_vm.yaml -e "job_name={{ zuul.job }}"
        {% if dpa_standalone_ntp_server is defined %}
        -e ntp_override={{ dpa_standalone_ntp_server }}
        {% endif %}
        {% if osp_release is defined %}
        -e repo_setup_commands=/home/zuul/ci-framework-data/artifacts/edpm_compute/compute_repo-0.sh
        {% endif %}
        -e "standalone_ip={{ standalone_ip }}" -e "standalone_gateway={{ standalone_gateway }}"
        -e "standalone_dns={{ standalone_dns | default(standalone_gateway) }}"
      args:
        chdir: "{{ framework_dir }}"

    - name: Write repo commands and deploy standalone using ci-framework no vm
      when: skip_standalone_vm is defined and skip_standalone_vm
      block:
        - name: Write out the repo setup commands to file for standalone to use
          ansible.builtin.copy:
            dest: /home/zuul/cdn_subscription_repos.sh
            content: |
              subscription-manager repos --enable openstack-17.1-for-rhel-9-x86_64-rpms
              subscription-manager repos --enable rhceph-6-tools-for-rhel-9-x86_64-rpms
              subscription-manager repos --enable fast-datapath-for-rhel-9-x86_64-rpms
              subscription-manager repos --enable rhel-9-for-x86_64-highavailability-eus-rpms

        - name: Deploy the standalone with ci_framework_deploy_standalone_vm.yaml
          ansible.builtin.shell: >
            ansible-playbook {{ rdo_dir }}/ci_framework_deploy_standalone_vm.yaml -e "job_name={{ zuul.job }}"
            {% if dpa_standalone_ntp_server is defined %}
            -e ntp_override={{ dpa_standalone_ntp_server }}
            {% endif %}
            -e repo_setup_commands=/home/zuul/cdn_subscription_repos.sh
            -e "standalone_ip={{ standalone_ip }}" -e "standalone_gateway={{ standalone_gateway }}"
            -e "standalone_dns={{ standalone_dns | default(standalone_gateway) }}"
          args:
            chdir: "{{ framework_dir }}"

        - name: Insert vars for data plane operator and os-net-config with zuul native standalone node
          ansible.builtin.blockinfile:
            path: "{{ rdo_dir }}/vars.yaml"
            block: |
              dataplane_os_net_config_iface: nic2
              dataplane_public_iface: eth1
              dataplane_os_net_config_set_route: false

    - name: Wait for standalone vm to be available
      ansible.builtin.wait_for:
        port: 22
        host: "{{ standalone_ip }}"
        delay: 10
        timeout: 300
      vars:
        ansible_user: root
        ansible_ssh_private_key_file: /home/zuul/src/github.com/openstack-k8s-operators/install_yamls/out/edpm/ansibleee-ssh-key-id_rsa

    - name: Accept standalone vm ssh host keys to avoid prompt connecting for the first time
      connection: local
      ansible.builtin.shell: |
        ssh-keygen -F {{ standalone_ip }} ||
          ssh-keyscan -H {{ standalone_ip }} >> ~/.ssh/known_hosts
      register: known_hosts_script
      changed_when: "'found' not in known_hosts_script.stdout"

    - name: Run test preparation in standalone vm
      ansible.builtin.shell:
        ansible-playbook {{ rdo_dir }}/standalone_prepare_tests.yaml -i /home/zuul/{{ standalone_vm_inventory | default("standalone_vm_inventory") }}

    - name: Configure networking to provide host access to internalapi network
      when: single_node
      block:
        - name: Get bridge used by standalone vm
          become: true
          ansible.builtin.shell:
            virsh dumpxml edpm-compute-0 | grep -oP "(?<=bridge=').*(?=')"
          register: epdm_bridge

        # FIXME: the tag and the address should ideally be calculated from definitions
        # The address should ideally be removed from the address pool available for CNI
        # for allocation.
        - name: Configure access of adoption host to internalapi network
          ansible.builtin.shell: |
            sudo ip link add link "{{ epdm_bridge.stdout }}" name vlan20 type vlan id 20
            sudo ip addr add dev vlan20 172.17.0.222/24
            sudo ip link set up dev vlan20

    - name: Place standalone_ip into vars.yaml for EDPM
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        regexp: '^edpm_node_ip:'
        value: "edpm_node_ip: {{ standalone_ip }}"

    - name: Place standalone_ip into vars.yaml for MariaDB
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        regexp: '^source_mariadb_ip:'
        value: "source_mariadb_ip: {{ standalone_ip }}"

    - name: Place standalone_ip into vars.yaml for OVN
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        regexp: '^source_ovndb_ip:'
        value: "source_ovndb_ip: {{ standalone_ip }}"

    - name: Read the standalone ssh key downloaded from standalone vm
      ansible.builtin.slurp:
        path: "{{ standalone_private_key | default('/home/zuul/src/github.com/openstack-k8s-operators/install_yamls/out/edpm/ansibleee-ssh-key-id_rsa') }}"
      register: standalone_key

    - name: Place standalone key into secrets.yaml
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/secrets.yaml"
        regexp: '^edpm_encoded_privatekey:'
        value: "edpm_encoded_privatekey: \"{{ standalone_key['content'] }}\""

    - name: Read the tripleo passwords downloaded from standalone
      ansible.builtin.slurp:
        path: /home/zuul/tripleo-standalone-passwords.yaml
      register: tripleo_passwords

    - name: Set tripleo passwords in secrets.yaml
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/secrets.yaml"
        regexp: "{{ item.key }}:"
        line: "{{ item.key }}: {{ tripleo_passwords['content'] | b64decode | regex_search(item.regex + ': (.+)', '\\1') | first }}"
      loop:
        - key: 'source_db_root_password'
          regex: 'MysqlRootPassword'
        - key: 'glance_password'
          regex: 'GlancePassword'
        - key: 'placement_password'
          regex: 'PlacementPassword'
        - key: 'cinder_password'
          regex: 'CinderPassword'
        - key: 'neutron_password'
          regex: 'NeutronPassword'
        - key: 'heat_password'
          regex: 'HeatPassword'
        - key: 'heat_auth_encryption_key'
          regex: 'HeatAuthEncryptionKey'
        - key: 'manila_password'
          regex: 'ManilaPassword'
        - key: 'ironic_password'
          regex: 'IronicPassword'
        - key: 'nova_password'
          regex: 'NovaPassword'
        - key: 'octavia_password'
          regex: 'OctaviaPassword'

    - name: Set standalone login var controller1_ssh in secrets.yaml
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/secrets.yaml"
        regexp: 'controller1_ssh:'
        value: "controller1_ssh: ssh -i {{ standalone_private_key | default('/home/zuul/src/github.com/openstack-k8s-operators/install_yamls/out/edpm/ansibleee-ssh-key-id_rsa') }} root@{{ standalone_ip }}"

    - name: pip install openstackclient for keystone adoption on crc
      become: true
      ansible.builtin.pip:
        name: python-openstackclient
        executable: pip3

    - name: Configure hosts for nested crc
      # this block is not needed in extracted crc job
      when: single_node
      block:
        - name: grab the crc VM IP address
          ansible.builtin.command: crc ip
          register: crc_ip

        - name: Set etc hosts entry for keystone glance placement cinder to crc VM IP
          become: true
          ansible.builtin.lineinfile:
            path: "/etc/hosts"
            insertafter: "EOF"
            value: "{{ crc_ip.stdout }} keystone-public-openstack.apps-crc.testing glance-public-openstack.apps-crc.testing placement-public-openstack.apps-crc.testing cinder-public-openstack.apps-crc.testing"

    - name: Fetch hash and set ci_testing_hash fact for periodic
      when: "'periodic' in zuul.job or (force_periodic|default(false)|bool)"
      block:
        - name: Fetch latest c9 or rhel9 antelope podified-ci-testing from dlrn
          when: dlrn_hash_tag is not defined
          ansible.builtin.uri:
            url: "https://{{ dpa_dlrn_server | default('trunk.rdoproject.org') }}/{{ dpa_dlrn_namespace | default('centos9-antelope') }}/podified-ci-testing/delorean.repo.md5"
            return_content: true
          register: latest_podified_ci_testing
          until: latest_podified_ci_testing.status == 200
          retries: 6
          delay: 5

        - name: Insert vars needed for periodic job into test vars.yaml
          ansible.builtin.blockinfile:
            path: "{{ rdo_dir }}/vars.yaml"
            block: |
              periodic: true
              container_registry: "{{ dpa_container_registry | default('quay.rdoproject.org') }}"
              container_namespace: "{{ dpa_container_namespace | default('podified-antelope-centos9') }}"
              container_tag: {{ dlrn_hash_tag | default(latest_podified_ci_testing.content) }}

        - name: Set timesync_ntp_servers if dpa_standalone_ntp_server set
          ansible.builtin.blockinfile:
            path: "{{ rdo_dir }}/vars.yaml"
            block: |
              timesync_ntp_servers:
                - hostname: {{ dpa_standalone_ntp_server }}
              #TODO: Remove after https://github.com/openstack-k8s-operators/data-plane-adoption/pull/199/ is merged
              edpm_chrony_ntp_servers:
                - {{ dpa_standalone_ntp_server }}
          when: dpa_standalone_ntp_server is defined

    - name: Store upstream dns server in vars.yaml if defined
      # we need to expose this so that the tests can then point the dnsmasq in
      # the controlplane to a working dns server to resolve names outside of
      # openstack
      when: upstream_control_plane_dns is defined
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        line: "upstream_dns: {{ upstream_control_plane_dns }}"

    - name: Run data-plane-adoption tests
      community.general.make:
        chdir: "{{ dpa_dir }}"
        target: test-with-ceph
        params:
          TEST_CONFIG: "{{ rdo_dir }}/ansible.cfg"
          TEST_SECRETS: "{{ rdo_dir}}/secrets.yaml"
          TEST_VARS: "{{ rdo_dir }}/vars.yaml"
          TEST_INVENTORY: "tests/inventory.sample-crc-vagrant.yaml"
      register: make_res
      failed_when: '"failed=0" not in "{{ make_res.stdout_lines[-1:] }}"'

    - name: Unregister with subscription-manager when this was a CDN OSP 17.1 source job
      when: skip_standalone_vm is defined and skip_standalone_vm
      ansible.builtin.shell:
        ansible-playbook {{ rdo_dir }}/unregister_RH_subscription_standalone.yaml -i /home/zuul/{{ standalone_vm_inventory | default("standalone_vm_inventory") }} -e "skip_standalone_vm={{ skip_standalone_vm | default(false) }}"

    - name: Mark job as successful
      ansible.builtin.file:
        path: "{{ ansible_user_dir }}/cifmw-success"
        state: touch
