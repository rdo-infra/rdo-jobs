- hosts: controller
  gather_facts: false
  vars:
    dpa_dir: "{{ dpa_dir_override | default('/home/zuul/src/github.com/openstack-k8s-operators/data-plane-adoption') }}"
    rdo_dir: "/home/zuul/src/review.rdoproject.org/rdo-jobs/playbooks/data_plane_adoption"
    framework_dir: "/home/zuul/src/github.com/openstack-k8s-operators/ci-framework"
    cifmw_datadir: "/home/zuul/ci-framework-data"
    pre_adoption_tempest_dir: "/home/zuul/ci-framework-data/tests/pre-adoption-tempest/"
    source_mariadb_ips:
      - 172.17.0.100
    osp_17_repos:
      - openstack-17.1-for-rhel-9-x86_64-rpms
      - rhceph-7-tools-for-rhel-9-x86_64-rpms
      - fast-datapath-for-rhel-9-x86_64-rpms
      - rhel-9-for-x86_64-highavailability-eus-rpms
  tasks:
    - name: Create inventory to run tasks inside vm
      ansible.builtin.template:
        src: "{{ playbook_dir }}/files/standalone_vm_inventory.yaml.j2"
        dest: "/home/zuul/{{ standalone_vm_inventory | default('standalone_vm_inventory') }}"

    - name: Install collections to use nmcli and libvirt ansible modules
      ansible.builtin.command: ansible-galaxy collection install community.general community.libvirt

    - name: Write repo commands and deploy standalone using ci-framework without a vm
      block:
        - name: Copy additional heat environment file if provided
          when:
            - source_heat_env_file is defined
            - source_heat_env_file | length > 0
          ansible.builtin.copy:
            src: "{{ source_heat_env_file }}"
            dest: "{{ additional_heat_env_file | default('/home/zuul/additional_heat_params.yaml') }}"
            mode: '0644'

        - name: Write out the repo setup commands to file for standalone to use
          ansible.builtin.lineinfile:
            create: true
            path: "/home/zuul/cdn_subscription_repos.sh"
            value: "subscription-manager repos --enable {{ osp_17_repos | join(' --enable ') }}"

        - name: Deploy the standalone with ci_framework_deploy_standalone_vm.yaml
          ansible.builtin.shell: >
            ansible-playbook {{ rdo_dir }}/ci_framework_deploy_standalone_vm.yaml -e "job_name={{ zuul.job }}"
            {% if dpa_standalone_ntp_server is defined %}
            -e ntp_override={{ dpa_standalone_ntp_server }}
            {% endif %}
            -e repo_setup_commands=/home/zuul/cdn_subscription_repos.sh
            -e "standalone_ip={{ standalone_ip }}" -e "standalone_gateway={{ standalone_gateway }}"
            -e "standalone_dns={{ standalone_dns | default(standalone_gateway) }}"
            -e "use_ceph={{ use_ceph | default('true') }}"
            -e "cloud_domain={{ cloud_domain | default('localdomain') }}"
            -e "enable_tls={{ enable_tls | default('false') }}"
            -e "enable_telemetry={{ enable_telemetry | default('false') }}"
            -e "enable_barbican={{ enable_barbican | default('false') }}"
            -e "enable_octavia={{ enable_octavia | default('true') }}"
            -e "swift_replicated={{ swift_replicated | default('false') }}"
          args:
            chdir: "{{ framework_dir }}"

    - name: Wait for standalone vm to be available
      ansible.builtin.wait_for:
        port: 22
        host: "{{ standalone_ip }}"
        delay: 10
        timeout: 300
      vars:
        ansible_user: root
        ansible_ssh_private_key_file: /home/zuul/src/github.com/openstack-k8s-operators/install_yamls/out/edpm/ansibleee-ssh-key-id_rsa

    - name: Accept standalone vm ssh host keys to avoid prompt connecting for the first time
      connection: local
      ansible.builtin.shell: |
        ssh-keygen -F {{ standalone_ip }} ||
          ssh-keyscan -H {{ standalone_ip }} >> ~/.ssh/known_hosts
      register: known_hosts_script
      changed_when: "'found' not in known_hosts_script.stdout"

    - name: Run test preparation in standalone vm
      ansible.builtin.shell:
        ansible-playbook {{ rdo_dir }}/standalone_prepare_tests.yaml -i /home/zuul/{{ standalone_vm_inventory | default("standalone_vm_inventory") }}

    - name: Place standalone_ip into vars.yaml for edpm, mariadb, ovndb
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        regexp: "'^{{ item }}:'"
        value: "{{ item }}: {{ standalone_ip }}"
      loop:
        - "edpm_node_ip"
        - "source_ovndb_ip"

    - name: Set source DB in vars.yaml
      ansible.builtin.blockinfile:
        marker_begin: "BEGIN source DB, edpm_nodes vars"
        marker_end: "END source DB, edpm_nodes vars"
        path: "{{ rdo_dir }}/vars.yaml"
        block: |
          {%+ if multi_cell|default(false) +%}
          source_galera_members:
            default:
              - name: standalone
                ip: {{ source_mariadb_ips[0] }}
          {%+ else +%}
          source_galera_members: |
            ["standalone"]="{{ source_mariadb_ips[0] }}"
          {%+ endif +%}

          {%+ if multi_cell|default(false) +%}
          source_mariadb_ip:
            default: {{ source_mariadb_ips[0] }}
          {% else %}
          source_mariadb_ip: {{ source_mariadb_ips[0] }}
          {%+ endif +%}

          edpm_nodes:
            cell1:
              standalone:
                hostName: standalone.{{ cloud_domain | default('localdomain') }}
                ansible:
                  ansibleHost: {{ standalone_ip }}
                networks:
                  - defaultRoute: true
                    fixedIP: {{ standalone_ip }}
                    name: ctlplane
                    subnetName: subnet1
                  - name: internalapi
                    fixedIP: 172.17.0.{{ standalone_ip.split('.')[-1] }}
                    subnetName: subnet1
                  - name: storage
                    fixedIP: 172.18.0.{{ standalone_ip.split('.')[-1] }}
                    subnetName: subnet1
                  - name: tenant
                    fixedIP: 172.19.0.{{ standalone_ip.split('.')[-1] }}
                    subnetName: subnet1
                  - name: storagemgmt
                    fixedIP: 172.20.0.{{ standalone_ip.split('.')[-1] }}
                    subnetName: subnet1

    - name: Set EDPM node hostname in vars.yaml
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        regexp: "'^edpm_node_hostname:'"
        value: "edpm_node_hostname: standalone.{{ cloud_domain | default('localdomain') }}"

    - name: Set TLS Everywhere in vars.yaml
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        regexp: "'^enable_tlse:'"
        value: "enable_tlse: {{ enable_tls | default('false') }}"

    - name: Set prelaunch_barbican_secret in vars.yaml
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        regexp: "'^prelaunch_barbican_secret:'"
        value: "prelaunch_barbican_secret: {{ enable_barbican | default('false') }}"

    - name: Configure whether to run octavia adoption
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        line: "octavia_adoption: {{ enable_octavia | default('true') }}"

    - name: Insert vars for data plane operator and os-net-config with zuul native standalone node
      ansible.builtin.blockinfile:
        marker_begin: "BEGIN os-net-config vars"
        marker_end: "END os-net-config vars"
        path: "{{ rdo_dir }}/vars.yaml"
        block: |
          dataplane_os_net_config_iface: nic2
          dataplane_public_iface: eth1
          dataplane_os_net_config_set_route: false

    - name: Read the standalone ssh key downloaded from standalone
      ansible.builtin.slurp:
        path: "{{ standalone_private_key | default('/home/zuul/src/github.com/openstack-k8s-operators/install_yamls/out/edpm/ansibleee-ssh-key-id_rsa') }}"
      register: standalone_key

    - name: Place standalone key into secrets.yaml
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/secrets.yaml"
        regexp: '^edpm_encoded_privatekey:'
        value: "edpm_encoded_privatekey: \"{{ standalone_key['content'] }}\""

    - name: Read the tripleo passwords downloaded from standalone
      ansible.builtin.slurp:
        path: /home/zuul/overcloud-passwords.yaml
      register: tripleo_passwords

    - name: Set tripleo passwords in secrets.yaml
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/secrets.yaml"
        regexp: "{{ item.key }}:"
        line: "{{ item.key }}: {{ tripleo_passwords['content'] | b64decode | regex_search(item.regex + ': (.+)', '\\1') | first }}"
      loop:
        - key: 'aodh_password'
          regex: 'AodhPassword'
        - key: 'barbican_password'
          regex: 'BarbicanPassword'
        - key: 'ceilometer_password'
          regex: 'CeilometerPassword'
        - key: 'glance_password'
          regex: 'GlancePassword'
        - key: 'placement_password'
          regex: 'PlacementPassword'
        - key: 'cinder_password'
          regex: 'CinderPassword'
        - key: 'neutron_password'
          regex: 'NeutronPassword'
        - key: 'heat_password'
          regex: 'HeatPassword'
        - key: 'heat_stack_domain_admin_password'
          regex: 'HeatStackDomainAdminPassword'
        - key: 'heat_auth_encryption_key'
          regex: 'HeatAuthEncryptionKey'
        - key: 'manila_password'
          regex: 'ManilaPassword'
        - key: 'ironic_password'
          regex: 'IronicPassword'
        - key: 'nova_password'
          regex: 'NovaPassword'
        - key: 'octavia_password'
          regex: 'OctaviaPassword'
        - key: 'swift_password'
          regex: 'SwiftPassword'
        - key: 'libvirt_password'
          regex: 'LibvirtTLSPassword'

    - name: Set standalone login var controller1_ssh in secrets.yaml
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/secrets.yaml"
        regexp: 'controller1_ssh:'
        value: "controller1_ssh: ssh -i {{ standalone_private_key | default('/home/zuul/src/github.com/openstack-k8s-operators/install_yamls/out/edpm/ansibleee-ssh-key-id_rsa') }} root@{{ standalone_ip }}"

    - name: Set ipa_ssh var in secrets.yaml
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/secrets.yaml"
        regexp: 'ipa_ssh:'
        value: "ipa_ssh: ssh -i {{ standalone_private_key | default('/home/zuul/src/github.com/openstack-k8s-operators/install_yamls/out/edpm/ansibleee-ssh-key-id_rsa') }} root@{{ standalone_ip }} podman exec -ti freeipa-server-container"

    - name: Install required packages
      become: true
      ansible.builtin.package:
        name:
          - python3
          - python3-pip

    - name: pip install openstackclient for keystone adoption on crc
      become: true
      ansible.builtin.pip:
        name: python-openstackclient
        executable: pip3

    - name: Insert edpm_bootstrap_command var into dataplane tests vars
      ansible.builtin.blockinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        marker_begin: "BEGIN edpm_bootstrap_command vars"
        marker_end: "END edpm_bootstrap_command vars"
        block: |
          edpm_bootstrap_command: |
            {{ edpm_bootstrap_command | indent(2) }}
      when: edpm_bootstrap_command is defined

    - name: Store node-exporter image in vars.yaml if defined
      when: edpm_telemetry_node_exporter_image is defined
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        line: "edpm_telemetry_node_exporter_image: {{ edpm_telemetry_node_exporter_image }}"

    - name: Insert edpm_container_registry_logins var into dataplane tests vars
      ansible.builtin.blockinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        marker_begin: "BEGIN edpm_container_registry_logins vars"
        marker_end: "END edpm_container_registry_logins vars"
        block: |
          edpm_container_registry_logins:
            {% for login, value in edpm_container_registry_logins.items() -%}
            {{ login | indent(2) }}:
              {{ value | to_nice_yaml | trim }}
            {% endfor -%}
      when:
        - edpm_container_registry_logins is defined
        - edpm_container_registry_logins is mapping

    - name: Fetch hash and set ci_testing_hash fact for periodic
      when: "'periodic' in zuul.job or (force_periodic|default(false)|bool)"
      block:
        - name: Fetch latest c9 or rhel9 antelope tag from dlrn
          when: dlrn_hash_tag is not defined
          ansible.builtin.uri:
            url: "https://{{ dpa_dlrn_server | default('trunk.rdoproject.org') }}/{{ dpa_dlrn_namespace | default('centos9-antelope') }}/{{ dpa_dlrn_tag | default('podified-ci-testing') }}/delorean.repo.md5"
            return_content: true
          register: latest_dlrn_tag
          until: latest_dlrn_tag.status == 200
          retries: 6
          delay: 5

        - name: Insert vars needed for periodic job into test vars.yaml
          ansible.builtin.blockinfile:
            marker_begin: "BEGIN periodic container vars"
            marker_end: "END periodic container vars"
            path: "{{ rdo_dir }}/vars.yaml"
            block: |
              periodic: true
              container_registry: "{{ dpa_container_registry | default('quay.rdoproject.org') }}"
              container_namespace: "{{ dpa_container_namespace | default('podified-antelope-centos9') }}"
              container_tag: {{ dlrn_hash_tag | default(latest_dlrn_tag.content) }}

        - name: Set timesync_ntp_servers if dpa_standalone_ntp_server set
          ansible.builtin.blockinfile:
            path: "{{ rdo_dir }}/vars.yaml"
            block: |
              timesync_ntp_servers:
                - hostname: {{ dpa_standalone_ntp_server }}
          when: dpa_standalone_ntp_server is defined

    - name: Insert vars needed to override edpm images into test vars.yaml
      when:
        - dpa_container_registry is defined
        - dpa_container_namespace is defined
      ansible.builtin.blockinfile:
        marker_begin: "BEGIN dataplane container vars"
        marker_end: "END dataplane container vars"
        path: "{{ rdo_dir }}/vars.yaml"
        block: |
          registry_name: "{{ dpa_container_registry }}"
          registry_namespace: "{{ dpa_container_namespace }}"
          image_tag: "{{ dlrn_hash_tag | default(latest_dlrn_tag.content) }}"

    - name: Insert edpm_container_registry_insecure_registries into dataplane test vars
      ansible.builtin.blockinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        marker_begin: "BEGIN edpm_container_registry_insecure_registries vars"
        marker_end: "END edpm_container_registry_insecure_registries vars"
        block: |
          edpm_container_registry_insecure_registries:
          {{ edpm_container_registry_insecure_registries | to_nice_yaml }}
      when:
        - edpm_container_registry_insecure_registries is defined

    - name: Store upstream dns server in vars.yaml if defined
      # we need to expose this so that the tests can then point the dnsmasq in
      # the controlplane to a working dns server to resolve names outside of
      # openstack
      when: upstream_control_plane_dns is defined
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        line: "upstream_dns: {{ upstream_control_plane_dns }}"

    - name: Set var to skip ansibleee csv patching
      when: dpa_skip_patch_csv| default(false) | bool
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        line: "skip_patching_ansibleee_csv: {{ dpa_skip_patch_csv | string | lower }}"

    - name: Check if edpm-ansible.yml file was created
      ansible.builtin.stat:
        path: "/home/zuul/ci-framework-data/artifacts/edpm-ansible.yml"
      register: edpm_ansible_file

    - name: Read edpm_ansible file and extract ansibleee_runner img
      when: edpm_ansible_file.stat.exists
      block:
        - name: Read file
          ansible.builtin.slurp:
            path: "/home/zuul/ci-framework-data/artifacts/edpm-ansible.yml"
          register: edpm_ansible_output

        - name: Extract ansiblee_runner img
          vars:
            edpm_ansible_dict: "{{ edpm_ansible_output['content'] | b64decode | from_yaml }}"
          ansible.builtin.set_fact:
            ansibleee_runner_img: "{{ edpm_ansible_dict['cifmw_update_containers_ansibleee_image_url'] }}"

        - name: Insert ansibleee_runner_img var into vars.yaml
          ansible.builtin.lineinfile:
            path: "{{ rdo_dir }}/vars.yaml"
            line: "ansibleee_runner_img: {{ ansibleee_runner_img }}"

    - name: Workaround systemd-container
      # Note: This WA applies to version <= 17.1.3
      become: true
      delegate_to: standalone
      ansible.builtin.dnf:
        name:
          - systemd-container
        state: present

    - name: Update sos-reports package to use it with must-gather
      delegate_to: standalone
      become: true
      ansible.builtin.dnf:
        name: sos
        state: latest

    - name: Call test role before adoption tests
      become: true
      delegate_to: standalone
      tags:
        - tempest
      when:
        - dpa_run_pre_adoption_tempest | default(false) | bool
      import_tasks: run_tempest.yaml
      vars:
        os_cloud_name: standalone

    - name: Disable OSP17.1 repos before running OSP 18 setup and adoption
      delegate_to: standalone
      become: true
      ansible.builtin.shell: "subscription-manager repos --disable {{ osp_17_repos | join(' --disable ') }}"

    - name: Insert adoption extra vars when defined
      when: adoption_extra_vars is defined
      ansible.builtin.blockinfile:
        marker_begin: "BEGIN adoption extra vars"
        marker_end: "END adoption extra vars"
        path: "{{ rdo_dir }}/vars.yaml"
        block: |
          {{ adoption_extra_vars }}

    - name: "Run data-plane-adoption tests from {{ dpa_dir }}"
      community.general.make:
        chdir: "{{ dpa_dir }}"
        target: "{{ dpa_test_suite | default('test-with-ceph') }}"
        params:
          TEST_CONFIG: "{{ dpa_test_ansible_cfg | default(rdo_dir  ~ '/ansible.cfg') }}"
          TEST_SECRETS: "{{ rdo_dir }}/secrets.yaml"
          TEST_VARS: "{{ rdo_dir }}/vars.yaml"
          TEST_INVENTORY: "tests/inventory.sample-crc-vagrant.yaml"
      register: make_res
      failed_when: '"failed=0" not in make_res.stdout_lines[-1]'

    - name: Unregister tripleo osp17.1 nodes with subscription-manager
      delegate_to: standalone
      become: true
      failed_when: false
      ansible.builtin.shell: subscription-manager unregister

    - name: Call test role after adoption tests
      when:
        - dpa_run_post_adoption_tempest | default(true) | bool
        - cifmw_run_test_role is defined
      import_tasks: run_test_operator_tests.yaml

    - name: Mark job as successful
      when: not force_job_failure | default(false)
      ansible.builtin.file:
        path: "{{ ansible_user_dir }}/cifmw-success"
        state: touch
