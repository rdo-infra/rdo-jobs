- hosts: controller
  gather_facts: false
  vars:
    dpa_dir: "/home/zuul/src/github.com/openstack-k8s-operators/data-plane-adoption"
    rdo_dir: "/home/zuul/src/review.rdoproject.org/rdo-jobs/playbooks/data_plane_adoption"
    framework_dir: "/home/zuul/src/github.com/openstack-k8s-operators/ci-framework"
    cifmw_datadir: "/home/zuul/ci-framework-data"
    edpm_node_ip: 192.168.122.106
    source_mariadb_ip: 172.17.0.100
    source_ovndb_ip: 192.168.122.103
  tasks:
    - name: Create inventory for logs collection on the undercloud
      ansible.builtin.template:
        src: "{{ playbook_dir }}/files/standalone_vm_inventory.yaml.j2"
        dest: "/home/zuul/tripleo_ci_inventory"
      vars:
        tripleo_name: 'undercloud'

    - name: Install collections to use nmcli and libvirt ansible modules
      ansible.builtin.command: ansible-galaxy collection install community.general community.libvirt

    - name: Prepare nodes to deploy ceph
      when: use_ceph | default('false')
      block:
        - name: Copy ci-framework to undercloud to use when deploying ceph
          delegate_to: undercloud
          ansible.posix.synchronize:
            src: "{{ framework_dir }}/"
            dest: "/home/zuul/ci-framework"
            mode: pull
            rsync_opts:
              - "--exclude=.git"
              - "--exclude=tests"
              - "--exclude=zuul.d"
              - "--exclude=docs"
              - "-q"  # make rsync less verbose

        - name: Enable ceph repository
          become: true
          delegate_to: overcloud-controller-0
          ansible.builtin.command:
            cmd: subscription-manager repos --enable=rhceph-6-tools-for-rhel-9-x86_64-rpms

        - name: Install cephadm
          become: true
          delegate_to: overcloud-controller-0
          ansible.builtin.package:
            name: cephadm
            state: present

        - name: Install packages needed for ceph deployment on the overcloud nodes
          become: true
          delegate_to: "{{ item }}"
          when: item != 'undercloud'
          ansible.builtin.package:
            name:
              - lvm2
              - jq
            state: present
          loop: "{{ groups['rh-subscription'] }}"

    - name: Write repo commands and deploy undercloud with install_yamls
      block:
        - name: Write out the repo setup commands to file for undercloud to use
          ansible.builtin.copy:
            dest: /home/zuul/cdn_subscription_repos.sh
            content: |
              sudo subscription-manager repos --enable=rhel-9-for-x86_64-baseos-eus-rpms \
                --enable=rhel-9-for-x86_64-appstream-eus-rpms \
                --enable=rhel-9-for-x86_64-highavailability-eus-rpms \
                --enable=openstack-17.1-for-rhel-9-x86_64-rpms \
                {% if use_ceph is defined and use_ceph == 'true' %}
                --enable=rhceph-6-tools-for-rhel-9-x86_64-rpms \
                {% endif %}
                --enable=fast-datapath-for-rhel-9-x86_64-rpms

        - name: Deploy the tripleo source environment
          ansible.builtin.shell: >
            ansible-playbook {{ rdo_dir }}/install_yamls_deploy_tripleo.yaml -e "job_name={{ zuul.job }}"
            {% if dpa_standalone_ntp_server is defined %}
            -e ntp_override={{ dpa_standalone_ntp_server }}
            {% endif %}
            -e repo_setup_commands=/home/zuul/cdn_subscription_repos.sh
            -e "standalone_ip={{ standalone_ip }}" -e "standalone_gateway={{ standalone_gateway }}"
            -e "undercloud_dns={{ undercloud_dns | default(standalone_gateway) }}"
            -e "use_ceph={{ use_ceph | default('false') }}"
          args:
            chdir: "{{ framework_dir }}"

    - name: Wait for undercloud vm to be available
      ansible.builtin.wait_for:
        port: 22
        host: "{{ standalone_ip }}"
        delay: 10
        timeout: 300

    - name: Allow ssh connection to overcloud nodes
      ansible.builtin.shell: >
        ansible-playbook -i {{ cifmw_datadir }}/artifacts/zuul_inventory.yml
        {{rdo_dir}}/allow_zuul_connect_tripleo.yaml

    - name: Accept undercloud ssh host keys to avoid prompt connecting for the first time
      connection: local
      ansible.builtin.shell: |
        ssh-keygen -F {{ standalone_ip }} ||
          ssh-keyscan -H {{ standalone_ip }} >> ~/.ssh/known_hosts
      register: known_hosts_script
      changed_when: "'found' not in known_hosts_script.stdout"

    - name: Run test preparation in undercloud vm
      ansible.builtin.shell:
        ansible-playbook {{ rdo_dir }}/undercloud_prepare_tests.yaml -i /home/zuul/tripleo_ci_inventory

    - name: Place internal IP into vars.yaml for Mariadb
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        regexp: "'^source_mariadb_ip:'"
        value: "source_mariadb_ip: {{ source_mariadb_ip }}"

    - name: Place control0 IP into vars.yaml for ovndb
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        regexp: "'^source_ovndb_ip:'"
        value: "source_ovndb_ip: {{ source_ovndb_ip }}"

    - name: Place compute IP into vars.yaml for edpm_node_ip
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        regexp: "'^edpm_node_ip:'"
        value: "edpm_node_ip: {{ edpm_node_ip }}"

    - name: Fetch compute hostname to set edpm_node_hostname var
      delegate_to: "overcloud-novacompute-0"
      ansible.builtin.slurp:
        path: /home/zuul/ansible_hostname
      register: compute_hostname

    - name: Set EDPM node hostname in vars.yaml
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        regexp: "'^edpm_node_hostname:'"
        value: "edpm_node_hostname: {{ compute_hostname['content'] | b64decode | trim }}.{{ cloud_domain | default('localdomain') }}"

    - name: Set TLS Everywhere in vars.yaml
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        regexp: "'^enable_tlse:'"
        value: "enable_tlse: {{ enable_tls | default('false') }}"

    - name: Insert vars for data plane operator and os-net-config with zuul native undercloud node
      ansible.builtin.blockinfile:
        marker_begin: "BEGIN os-net-config vars"
        marker_end: "END os-net-config vars"
        path: "{{ rdo_dir }}/vars.yaml"
        block: |
          dataplane_os_net_config_iface: nic2
          dataplane_public_iface: eth1
          upstream_dns: "{{ standalone_gateway }}"
          dataplane_os_net_config_set_route: false
          os_cloud_name: overcloud
          edpm_user: zuul
          standalone_ip: "{{ standalone_ip | default('192.168.122.100') }}"
          neutron_physical_bridge_name: br-ex
          edpm_nodes:
            {{ compute_hostname['content'] | b64decode | trim }}:
              hostName: "{{ compute_hostname['content'] | b64decode | trim }}.{{ cloud_domain | default('localdomain') }}"
              ansible:
                ansibleHost: {{ edpm_node_ip }}
              networks:
                - defaultRoute: true
                  fixedIP: {{ edpm_node_ip }}
                  name: ctlplane
                  subnetName: subnet1
                - name: internalapi
                  fixedIP: 172.17.0.106
                  subnetName: subnet1
                - name: storage
                  fixedIP: 172.18.0.106
                  subnetName: subnet1
                - name: tenant
                  fixedIP: 172.19.0.106
                  subnetName: subnet1

    - name: Read the ssh key downloaded from undercloud
      ansible.builtin.slurp:
        path: "{{ standalone_private_key | default('/home/zuul/src/github.com/openstack-k8s-operators/install_yamls/out/edpm/ansibleee-ssh-key-id_rsa') }}"
      register: undercloud_key

    - name: Place undercloud key into secrets.yaml
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/secrets.yaml"
        regexp: '^edpm_encoded_privatekey:'
        value: "edpm_encoded_privatekey: \"{{ undercloud_key['content'] }}\""

    - name: Read the tripleo passwords downloaded from undercloud
      ansible.builtin.slurp:
        path: /home/zuul/tripleo-passwords.yaml
      register: tripleo_passwords

    - name: Set tripleo passwords in secrets.yaml
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/secrets.yaml"
        regexp: "{{ item.key }}:"
        line: "{{ item.key }}: {{ tripleo_passwords['content'] | b64decode | regex_search(item.regex + ': (.+)', '\\1') | first }}"
      loop:
        - key: 'source_db_root_password'
          regex: 'MysqlRootPassword'
        - key: 'barbican_password'
          regex: 'BarbicanPassword'
        - key: 'glance_password'
          regex: 'GlancePassword'
        - key: 'placement_password'
          regex: 'PlacementPassword'
        - key: 'cinder_password'
          regex: 'CinderPassword'
        - key: 'neutron_password'
          regex: 'NeutronPassword'
        - key: 'heat_password'
          regex: 'HeatPassword'
        - key: 'heat_auth_encryption_key'
          regex: 'HeatAuthEncryptionKey'
        - key: 'manila_password'
          regex: 'ManilaPassword'
        - key: 'ironic_password'
          regex: 'IronicPassword'
        - key: 'nova_password'
          regex: 'NovaPassword'
        - key: 'octavia_password'
          regex: 'OctaviaPassword'
        - key: 'swift_password'
          regex: 'SwiftPassword'

    - name: Set controller ssh login vars controller1_ssh in secrets.yaml
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/secrets.yaml"
        regexp: "controller{{ item.ctrl }}_ssh:"
        value: "controller{{ item.ctrl }}_ssh: ssh -o StrictHostKeyChecking=accept-new -i {{ standalone_private_key | default('/home/zuul/src/github.com/openstack-k8s-operators/install_yamls/out/edpm/ansibleee-ssh-key-id_rsa') }} root@192.168.122.10{{ item.suffix }}"
      loop:
        - {ctrl: "1", suffix: "3"}
        - {ctrl: "2", suffix: "4"}
        - {ctrl: "3", suffix: "5"}

    - name: Install required packages
      become: true
      ansible.builtin.package:
        name:
          - python3
          - python3-pip

    - name: pip install openstackclient for keystone adoption on crc
      become: true
      ansible.builtin.pip:
        name: python-openstackclient
        executable: pip3

    - name: Fetch hash and set ci_testing_hash fact for periodic
      when: "'periodic' in zuul.job or (force_periodic|default(false)|bool)"
      block:
        - name: Fetch latest c9 or rhel9 antelope tag from dlrn
          when: dlrn_hash_tag is not defined
          ansible.builtin.uri:
            url: "https://{{ dpa_dlrn_server | default('trunk.rdoproject.org') }}/{{ dpa_dlrn_namespace | default('centos9-antelope') }}/{{ dpa_dlrn_tag | default('podified-ci-testing') }}/delorean.repo.md5"
            return_content: true
          register: latest_dlrn_tag
          until: latest_dlrn_tag.status == 200
          retries: 6
          delay: 5

        - name: Insert vars needed for periodic job into test vars.yaml
          ansible.builtin.blockinfile:
            marker_begin: "BEGIN periodic container vars"
            marker_end: "END periodic container vars"
            path: "{{ rdo_dir }}/vars.yaml"
            block: |
              periodic: true
              container_registry: "{{ dpa_container_registry | default('quay.rdoproject.org') }}"
              container_namespace: "{{ dpa_container_namespace | default('podified-antelope-centos9') }}"
              container_tag: {{ dlrn_hash_tag | default(latest_dlrn_tag.content) }}

        - name: Set timesync_ntp_servers if dpa_standalone_ntp_server set
          ansible.builtin.blockinfile:
            path: "{{ rdo_dir }}/vars.yaml"
            block: |
              timesync_ntp_servers:
                - hostname: {{ dpa_standalone_ntp_server }}
          when: dpa_standalone_ntp_server is defined

    - name: Store upstream dns server in vars.yaml if defined
      # we need to expose this so that the tests can then point the dnsmasq in
      # the controlplane to a working dns server to resolve names outside of
      # openstack
      when: upstream_control_plane_dns is defined
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        line: "upstream_dns: {{ upstream_control_plane_dns }}"

    - name: Check if edpm-ansible.yml file was created
      ansible.builtin.stat:
        path: "/home/zuul/ci-framework-data/artifacts/edpm-ansible.yml"
      register: edpm_ansible_file

    - name: Read edpm_ansible  file and extract ansibleee_runner img
      when: edpm_ansible_file.stat.exists
      block:
        - name: Read file
          ansible.builtin.slurp:
            path: "/home/zuul/ci-framework-data/artifacts/edpm-ansible.yml"
          register: edpm_ansible_output

        - name: Extract ansiblee_runner img
          ansible.builtin.set_fact:
            ansibleee_runner_img: "{{ edpm_ansible_output['content'] | b64decode | regex_search('RELATED_IMAGE_ANSIBLEEE_IMAGE_URL_DEFAULT' + ': \"(.+)\"', '\\1') | first }}"

        - name: Insert ansibleee_runner_img var into vars.yaml
          ansible.builtin.lineinfile:
            path: "{{ rdo_dir }}/vars.yaml"
            line: "ansibleee_runner_img: {{ ansibleee_runner_img }}"

    - name: Run data-plane-adoption tests test-minimal target
      community.general.make:
        chdir: "{{ dpa_dir }}"
        target: "test-minimal"
        params:
          TEST_CONFIG: "{{ rdo_dir }}/ansible.cfg"
          TEST_SECRETS: "{{ rdo_dir}}/secrets.yaml"
          TEST_VARS: "{{ rdo_dir }}/vars.yaml"
          TEST_INVENTORY: "tests/inventory.sample-crc-vagrant.yaml"
      register: make_res
      failed_when: '"failed=0" not in "{{ make_res.stdout_lines[-1:] }}"'

    - name: Unregister with subscription-manager when this was a CDN OSP 17.1 source job
      ansible.builtin.shell:
        ansible-playbook {{ rdo_dir }}/unregister_RH_subscription_standalone.yaml -i /home/zuul/{{ standalone_vm_inventory | default("standalone_vm_inventory") }}

    - name: Mark job as successful
      ansible.builtin.file:
        path: "{{ ansible_user_dir }}/cifmw-success"
        state: touch
