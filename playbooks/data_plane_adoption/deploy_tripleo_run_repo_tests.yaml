- name: Prepare for tripleo deployment
  vars: &ooo_vars
    dpa_dir: "{{ dpa_dir_override | default('/home/zuul/src/github.com/openstack-k8s-operators/data-plane-adoption') }}"
    rdo_dir: "/home/zuul/src/review.rdoproject.org/rdo-jobs/playbooks/data_plane_adoption"
    framework_dir: "/home/zuul/src/github.com/openstack-k8s-operators/ci-framework"
    cifmw_datadir: "/home/zuul/ci-framework-data"
    tripleo_passwords_file: "{{ tripleo_passwords | default('/home/zuul/overcloud-passwords.yaml') }}"
    source_mariadb_ips:
      - 172.17.0.103
      - 172.17.0.104
      - 172.17.0.105
    source_ovndb_ip: 172.17.0.103
  ansible.builtin.import_playbook: deploy_tripleo_prepare.yaml

- hosts: controller
  gather_facts: false
  vars: *ooo_vars
  tasks:
    - name: Place internal IP into vars.yaml for Mariadb
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        regexp: "'^source_mariadb_ip:'"
        value: "source_mariadb_ip:\n  default: {{ source_mariadb_ips[0] }}"

    - name: Place control0 IP into vars.yaml for ovndb
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        regexp: "'^source_ovndb_ip:'"
        value: "source_ovndb_ip: {{ source_ovndb_ip }}"

    - name: Fetch controller hostnames to set source_galera_members var
      delegate_to: "{{ item }}"
      ansible.builtin.slurp:
        path: /home/zuul/ansible_hostname
      register: controller_hostnames
      loop: "{{ groups['tripleo_controllers'] }}"

    - name: Fetch compute hostnames to set edpm_node_hostname vars
      delegate_to: "{{ item }}"
      ansible.builtin.slurp:
        path: /home/zuul/ansible_hostname
      register: compute_hostnames
      loop: "{{ groups['tripleo_computes'] }}"

    - name: Fetch networker hostnames to set edpm_node_hostname vars
      delegate_to: "{{ item }}"
      ansible.builtin.slurp:
        path: /home/zuul/ansible_hostname
      register: networker_hostnames
      loop: "{{ groups['tripleo_networkers'] | default([]) }}"

    - name: Set compute hostname facts to prevent repetition
      ansible.builtin.set_fact:
        compute{{ item }}_hostname: "{{ compute_hostnames.results[item | int]['content'] | b64decode | trim }}.{{ cloud_domain | default('localdomain') }}"
      with_sequence: start=0 end="{{ (groups['tripleo_computes'] | length - 1) }}"

    - name: Set networker hostname facts to prevent repetition
      when: "'tripleo_networkers' in groups"
      ansible.builtin.set_fact:
        networker{{ item }}_hostname: "{{ networker_hostnames.results[item | int]['content'] | b64decode | trim }}.{{ cloud_domain | default('localdomain') }}"
      with_sequence: start=0 end="{{ (groups['tripleo_networkers'] | length - 1) }}"

    - name: Set controller hostname facts to prevent repetition
      ansible.builtin.set_fact:
        controller{{ item }}_hostname: "{{ controller_hostnames.results[item | int]['content'] | b64decode | trim }}.{{ cloud_domain | default('localdomain') }}"
      with_sequence: start=0 end="{{ (groups['tripleo_controllers'] | length - 1) }}"

    # NOTE: source of trurh are cifmw-adoption-base-source-multinode-* jobs.
    # inline via adoption_extra_vars directly instead of templating here
    - name: Set edpm_node_ip, _hostname, edpm_nodes, edpm_nodes_networker, edpm_computes in vars.yaml with compute hostnames
      ansible.builtin.blockinfile:
        marker_begin: "BEGIN edpm_node_ip hostname vars"
        marker_end: "END edpm_node_ip hostname vars"
        path: "{{ rdo_dir }}/vars.yaml"
        block: |
          edpm_node_hostname:  {{ compute0_hostname }}
          edpm_node_ip: {{ edpm_node_ips[0] }}
          {%+ if edpm_node_networker_ips is defined +%}
          edpm_networkers: |
          {% for i in range(edpm_node_networker_ips | length) %}
            ["{{ lookup('vars', 'networker' ~ i ~ '_hostname') }}"]="{{ edpm_node_networker_ips[i | int] }}"
          {% endfor %}
          {%+ endif +%}

          source_galera_members: |
          default:
            {% for i in range(source_mariadb_ips | length) %}
              ["{{ lookup('vars', 'controller' ~ i ~ '_hostname') }}"]="{{ source_mariadb_ips[i | int] }}"
            {% endfor %}

          edpm_nodes:
            default:
              {% for i in range(edpm_node_ips | length) %}
                {{ compute_hostnames.results[i | int]['content'] | b64decode | trim }}:
                  hostName: "{{ lookup('vars', 'compute' ~ i ~ '_hostname') }}"
                  ansible:
                    ansibleHost: {{ edpm_node_ips[i | int] }}
                  networks:
                    - defaultRoute: true
                      fixedIP: {{ edpm_node_ips[i | int] }}
                      name: ctlplane
                      subnetName: subnet1
                    - name: internalapi
                      fixedIP: 172.17.0.{{ edpm_node_ips[i | int].split('.')[-1] }}
                      subnetName: subnet1
                    - name: storage
                      fixedIP: 172.18.0.{{ edpm_node_ips[i | int].split('.')[-1] }}
                      subnetName: subnet1
                    - name: tenant
                      fixedIP: 172.19.0.{{ edpm_node_ips[i | int].split('.')[-1] }}
                      subnetName: subnet1
                    - name: storagemgmt
                      fixedIP: 172.20.0.{{ edpm_node_ips[i | int].split('.')[-1] }}
                      subnetName: subnet1
              {% endfor %}
              {%+ if edpm_node_networker_ips is defined +%}
              edpm_nodes_networker:
              {% for i in range(edpm_node_networker_ips | length) %}
                {{ networker_hostnames.results[i | int]['content'] | b64decode | trim }}:
                  hostName: "{{ lookup('vars', 'networker' ~ i ~ '_hostname') }}"
                  ansible:
                    ansibleHost: {{ edpm_node_networker_ips[i | int] }}
                  networks:
                    - defaultRoute: true
                      fixedIP: {{ edpm_node_networker_ips[i | int] }}
                      name: ctlplane
                      subnetName: subnet1
                    - name: internalapi
                      fixedIP: 172.17.0.{{ edpm_node_networker_ips[i | int].split('.')[-1] }}
                      subnetName: subnet1
                    - name: storage
                      fixedIP: 172.18.0.{{ edpm_node_networker_ips[i | int].split('.')[-1] }}
                      subnetName: subnet1
                    - name: tenant
                      fixedIP: 172.19.0.{{ edpm_node_networker_ips[i | int].split('.')[-1] }}
                      subnetName: subnet1
                    - name: storagemgmt
                      fixedIP: 172.20.0.{{ edpm_node_networker_ips[i | int].split('.')[-1] }}
                      subnetName: subnet1
              {% endfor %}
              {%+ endif +%}

    - name: Set TLS Everywhere in vars.yaml
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        regexp: "'^enable_tlse:'"
        value: "enable_tlse: {{ enable_tls | default('false') }}"

    - name: Set neutron_qe_test in vars.yaml
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        regexp: "'^neutron_qe_test:'"
        value: "neutron_qe_test: {{ neutron_qe_test | default('false') }}"

    - name: Set neutron_qe_dir in vars.yaml
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        regexp: "'^neutron_qe_dir:'"
        value: "neutron_qe_dir: {{ neutron_qe_dir | default('false') }}"

    - name: Set prelaunch_barbican_secret in vars.yaml
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        regexp: "'^prelaunch_barbican_secret:'"
        value: "prelaunch_barbican_secret: {{ enable_barbican | default('false') }}"

    - name: Set ipa_ssh var in secrets.yaml
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/secrets.yaml"
        regexp: 'ipa_ssh:'
        value: "ipa_ssh: ssh -i {{ standalone_private_key | default('/home/zuul/src/github.com/openstack-k8s-operators/install_yamls/out/edpm/ansibleee-ssh-key-id_rsa') }} root@{{ standalone_ip }} podman exec -ti freeipa-server-container"

    - name: Configure whether to run octavia adoption
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        line: "octavia_adoption: {{ enable_octavia | default('true') }}"

    - name: Insert vars for data plane operator and os-net-config with zuul native undercloud node
      ansible.builtin.blockinfile:
        marker_begin: "BEGIN os-net-config vars"
        marker_end: "END os-net-config vars"
        path: "{{ rdo_dir }}/vars.yaml"
        block: |
          dataplane_os_net_config_iface: nic2
          dataplane_public_iface: eth1
          upstream_dns: "{{ standalone_gateway }}"
          dataplane_os_net_config_set_route: false
          os_cloud_name: overcloud
          edpm_user: zuul
          standalone_ip: "{{ standalone_ip | default('192.168.122.100') }}"
          neutron_physical_bridge_name: br-ex

    - name: Set controller ssh login vars controllerX_ssh in secrets.yaml
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/secrets.yaml"
        regexp: "controller{{ item.ctrl }}_ssh:"
        value: "controller{{ item.ctrl }}_ssh: ssh -o StrictHostKeyChecking=accept-new -i {{ standalone_private_key | default('/home/zuul/src/github.com/openstack-k8s-operators/install_yamls/out/edpm/ansibleee-ssh-key-id_rsa') }} root@192.168.122.10{{ item.suffix }}"
      loop:
        - {ctrl: "1", suffix: "3"}
        - {ctrl: "2", suffix: "4"}
        - {ctrl: "3", suffix: "5"}

- name: Run tripleo deployment
  vars: *ooo_vars
  ansible.builtin.import_playbook: deploy_tripleo_run.yaml
