- hosts: controller
  gather_facts: false
  vars:
    dpa_dir: "{{ dpa_dir_override | default('/home/zuul/src/github.com/openstack-k8s-operators/data-plane-adoption') }}"
    rdo_dir: "/home/zuul/src/review.rdoproject.org/rdo-jobs/playbooks/data_plane_adoption"
    framework_dir: "/home/zuul/src/github.com/openstack-k8s-operators/ci-framework"
    cifmw_datadir: "/home/zuul/ci-framework-data"
    source_mariadb_ips:
      - 172.17.0.103
      - 172.17.0.104
      - 172.17.0.105
    source_ovndb_ip: 172.17.0.103
    osp_17_repos:
      - rhel-9-for-x86_64-baseos-eus-rpms
      - rhel-9-for-x86_64-appstream-eus-rpms
      - rhel-9-for-x86_64-highavailability-eus-rpms
      - openstack-17.1-for-rhel-9-x86_64-rpms
      - fast-datapath-for-rhel-9-x86_64-rpms
    osp_17_ceph_repos:
      - rhceph-7-tools-for-rhel-9-x86_64-rpms
  tasks:
    - name: Create inventory for logs collection on the undercloud
      ansible.builtin.template:
        src: "{{ playbook_dir }}/files/standalone_vm_inventory.yaml.j2"
        dest: "/home/zuul/tripleo_ci_inventory"
      vars:
        tripleo_name: 'undercloud'

    - name: Install collections to use nmcli and libvirt ansible modules
      ansible.builtin.command: ansible-galaxy collection install community.general community.libvirt

    - name: Prepare nodes to deploy ceph
      when: use_ceph | default('false') | bool
      block:
        - name: Copy ci-framework to undercloud to use when deploying ceph
          delegate_to: undercloud
          ansible.posix.synchronize:
            src: "{{ framework_dir }}/"
            dest: "/home/zuul/ci-framework"
            mode: pull
            rsync_opts:
              - "--exclude=.git"
              - "--exclude=tests"
              - "--exclude=zuul.d"
              - "--exclude=docs"
              - "-q"  # make rsync less verbose

        - name: Enable ceph repository
          become: true
          delegate_to: overcloud-controller-0
          ansible.builtin.command:
            cmd: subscription-manager repos --enable=rhceph-7-tools-for-rhel-9-x86_64-rpms

        - name: Install cephadm
          become: true
          delegate_to: overcloud-controller-0
          ansible.builtin.package:
            name: cephadm
            state: present

        - name: Install packages needed for ceph deployment on the overcloud nodes
          become: true
          delegate_to: "{{ item }}"
          when: item != 'undercloud'
          ansible.builtin.package:
            name:
              - lvm2
              - jq
            state: present
          loop: "{{ groups['rh-subscription'] }}"

    - name: Setup overcloud nodes for free-ipa when enable_tls true
      when: enable_tls|default('false')|bool
      vars:
        overcloud_hosts: "{{ groups['rh-subscription'] | reject('search', 'undercloud') | list }}"
      block:
        - name: Install ipa-client on all nodes
          delegate_to: "{{ item }}"
          become: true
          ansible.builtin.package:
            name: ipa-client
            state: present
          loop: "{{ groups['rh-subscription'] }}"
        - name: Template etc resolv.conf on tripleo overcloud nodes when enable_tls
          delegate_to: "{{ item }}"
          become: true
          ansible.builtin.template:
            src: "{{ playbook_dir }}/files/ipa_resolv_conf.j2"
            dest: "/etc/resolv.conf"
            owner: root
            group: root
            mode: 0644
          loop: "{{ overcloud_hosts }}"
        - name: Add ip route via ctlplane for overcloud nodes to reach the ipaserver dns
          delegate_to: "{{ item }}"
          become: true
          ansible.builtin.shell: "ip route add {{ ipa_container_ip | default('10.255.255.25') }} via 192.168.122.100 dev br-ex"
          loop: "{{ overcloud_hosts }}"
        - name: Create expected /etc/pki/CA directory on overcloud nodes
          delegate_to: "{{ item }}"
          become: true
          ansible.builtin.file:
            path: /etc/pki/CA
            state: directory
            mode: '0755'
          loop: "{{ overcloud_hosts }}"

    - name: Write repo commands and deploy undercloud with install_yamls
      block:
        - name: Write out the repo setup commands to file for undercloud to use
          ansible.builtin.lineinfile:
            create: true
            path: "/home/zuul/cdn_subscription_repos.sh"
            value: "subscription-manager repos --enable {{ osp_17_repos | join(' --enable ') }}"

        - name: Write ceph repo commands when use_ceph is set
          when: use_ceph is defined and use_ceph
          ansible.builtin.lineinfile:
            create: true
            path: "/home/zuul/cdn_subscription_repos.sh"
            value: "subscription-manager repos --enable {{ osp_17_ceph_repos | join(' --enable ') }}"

        - name: Deploy the tripleo source environment
          ansible.builtin.shell: >
            ansible-playbook {{ rdo_dir }}/install_yamls_deploy_tripleo.yaml -e "job_name={{ zuul.job }}"
            {% if dpa_standalone_ntp_server is defined %}
            -e ntp_override={{ dpa_standalone_ntp_server }}
            {% endif %}
            -e repo_setup_commands=/home/zuul/cdn_subscription_repos.sh
            -e "standalone_ip={{ standalone_ip }}" -e "standalone_gateway={{ standalone_gateway }}"
            -e "undercloud_dns={{ undercloud_dns | default(standalone_gateway) }}"
            -e "use_ceph={{ use_ceph | default('false') }}"
            -e "multi_cell={{ multi_cell | default(false) }}"
            -e "enable_telemetry={{ enable_telemetry | default('false') }}"
            -e "cloud_domain={{ cloud_domain | default('localdomain') }}"
            -e "enable_tls={{ enable_tls | default('false') }}"
            -e "enable_octavia={{ enable_octavia | default('true') }}"
          args:
            chdir: "{{ framework_dir }}"

    - name: Wait for undercloud vm to be available
      ansible.builtin.wait_for:
        port: 22
        host: "{{ standalone_ip }}"
        delay: 10
        timeout: 300

    - name: Allow ssh connection to overcloud nodes
      ansible.builtin.shell: >
        ansible-playbook -i {{ cifmw_datadir }}/artifacts/zuul_inventory.yml
        {{rdo_dir}}/allow_zuul_connect_tripleo.yaml

    - name: Accept undercloud ssh host keys to avoid prompt connecting for the first time
      connection: local
      ansible.builtin.shell: |
        ssh-keygen -F {{ standalone_ip }} ||
          ssh-keyscan -H {{ standalone_ip }} >> ~/.ssh/known_hosts
      register: known_hosts_script
      changed_when: "'found' not in known_hosts_script.stdout"

    - name: Run test preparation in undercloud vm
      ansible.builtin.shell:
        ansible-playbook {{ rdo_dir }}/undercloud_prepare_tests.yaml -i /home/zuul/tripleo_ci_inventory

    - name: Place internal IP into vars.yaml for Mariadb
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        regexp: "'^source_mariadb_ip:'"
        value: "source_mariadb_ip: {{ source_mariadb_ips[0] }}"

    - name: Place control0 IP into vars.yaml for ovndb
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        regexp: "'^source_ovndb_ip:'"
        value: "source_ovndb_ip: {{ source_ovndb_ip }}"

    - name: Fetch controller hostnames to set source_galera_members var
      delegate_to: "{{ item }}"
      ansible.builtin.slurp:
        path: /home/zuul/ansible_hostname
      register: controller_hostnames
      loop: "{{ groups['tripleo_controllers'] }}"

    - name: Fetch compute hostnames to set edpm_node_hostname vars
      delegate_to: "{{ item }}"
      ansible.builtin.slurp:
        path: /home/zuul/ansible_hostname
      register: compute_hostnames
      loop: "{{ groups['tripleo_computes'] }}"

    - name: Fetch networker hostnames to set edpm_node_hostname vars
      delegate_to: "{{ item }}"
      ansible.builtin.slurp:
        path: /home/zuul/ansible_hostname
      register: networker_hostnames
      loop: "{{ groups['tripleo_networkers'] | default([]) }}"

    - name: Set compute hostname facts to prevent repetition
      ansible.builtin.set_fact:
        compute{{ item }}_hostname: "{{ compute_hostnames.results[item | int]['content'] | b64decode | trim }}.{{ cloud_domain | default('localdomain') }}"
      with_sequence: start=0 end="{{ (groups['tripleo_computes'] | length - 1) }}"

    - name: Set networker hostname facts to prevent repetition
      when: "'tripleo_networkers' in groups"
      ansible.builtin.set_fact:
        networker{{ item }}_hostname: "{{ networker_hostnames.results[item | int]['content'] | b64decode | trim }}.{{ cloud_domain | default('localdomain') }}"
      with_sequence: start=0 end="{{ (groups['tripleo_networkers'] | length - 1) }}"

    - name: Set controller hostname facts to prevent repetition
      ansible.builtin.set_fact:
        controller{{ item }}_hostname: "{{ controller_hostnames.results[item | int]['content'] | b64decode | trim }}.{{ cloud_domain | default('localdomain') }}"
      with_sequence: start=0 end="{{ (groups['tripleo_controllers'] | length - 1) }}"

    - name: Set edpm_node_ip, _hostname, edpm_nodes, edpm_nodes_networker, edpm_computes in vars.yaml with compute hostnames
      ansible.builtin.blockinfile:
        marker_begin: "BEGIN edpm_node_ip hostname vars"
        marker_end: "END edpm_node_ip hostname vars"
        path: "{{ rdo_dir }}/vars.yaml"
        block: |
          edpm_node_hostname:  {{ compute0_hostname }}
          edpm_node_ip: {{ edpm_node_ips[0] }}
          edpm_computes: |
          {% for i in range(edpm_node_ips | length) %}
            ["{{ lookup('vars', 'compute' ~ i ~ '_hostname') }}"]="{{ edpm_node_ips[i | int] }}"
          {% endfor %}
          {%+ if edpm_node_networker_ips is defined +%}
          edpm_networkers: |
          {% for i in range(edpm_node_networker_ips | length) %}
            ["{{ lookup('vars', 'networker' ~ i ~ '_hostname') }}"]="{{ edpm_node_networker_ips[i | int] }}"
          {% endfor %}
          {%+ endif +%}

          source_galera_members: |
          {% for i in range(source_mariadb_ips | length) %}
            ["{{ lookup('vars', 'controller' ~ i ~ '_hostname') }}"]="{{ source_mariadb_ips[i | int] }}"
          {% endfor %}

          edpm_nodes:
          {% for i in range(edpm_node_ips | length) %}
            {{ compute_hostnames.results[i | int]['content'] | b64decode | trim }}:
              hostName: "{{ lookup('vars', 'compute' ~ i ~ '_hostname') }}"
              ansible:
                ansibleHost: {{ edpm_node_ips[i | int] }}
              networks:
                - defaultRoute: true
                  fixedIP: {{ edpm_node_ips[i | int] }}
                  name: ctlplane
                  subnetName: subnet1
                - name: internalapi
                  fixedIP: 172.17.0.{{ edpm_node_ips[i | int].split('.')[-1] }}
                  subnetName: subnet1
                - name: storage
                  fixedIP: 172.18.0.{{ edpm_node_ips[i | int].split('.')[-1] }}
                  subnetName: subnet1
                - name: tenant
                  fixedIP: 172.19.0.{{ edpm_node_ips[i | int].split('.')[-1] }}
                  subnetName: subnet1
                - name: storagemgmt
                  fixedIP: 172.20.0.{{ edpm_node_ips[i | int].split('.')[-1] }}
                  subnetName: subnet1
          {% endfor %}
          {%+ if edpm_node_networker_ips is defined +%}
          edpm_nodes_networker:
          {% for i in range(edpm_node_networker_ips | length) %}
            {{ networker_hostnames.results[i | int]['content'] | b64decode | trim }}:
              hostName: "{{ lookup('vars', 'networker' ~ i ~ '_hostname') }}"
              ansible:
                ansibleHost: {{ edpm_node_networker_ips[i | int] }}
              networks:
                - defaultRoute: true
                  fixedIP: {{ edpm_node_networker_ips[i | int] }}
                  name: ctlplane
                  subnetName: subnet1
                - name: internalapi
                  fixedIP: 172.17.0.{{ edpm_node_networker_ips[i | int].split('.')[-1] }}
                  subnetName: subnet1
                - name: storage
                  fixedIP: 172.18.0.{{ edpm_node_networker_ips[i | int].split('.')[-1] }}
                  subnetName: subnet1
                - name: tenant
                  fixedIP: 172.19.0.{{ edpm_node_networker_ips[i | int].split('.')[-1] }}
                  subnetName: subnet1
                - name: storagemgmt
                  fixedIP: 172.20.0.{{ edpm_node_networker_ips[i | int].split('.')[-1] }}
                  subnetName: subnet1
          {% endfor %}
          {%+ endif +%}

    - name: Set TLS Everywhere in vars.yaml
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        regexp: "'^enable_tlse:'"
        value: "enable_tlse: {{ enable_tls | default('false') }}"

    - name: Set neutron_qe_test in vars.yaml
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        regexp: "'^neutron_qe_test:'"
        value: "neutron_qe_test: {{ neutron_qe_test | default('false') }}"

    - name: Set neutron_qe_dir in vars.yaml
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        regexp: "'^neutron_qe_dir:'"
        value: "neutron_qe_dir: {{ neutron_qe_dir | default('false') }}"

    - name: Set prelaunch_barbican_secret in vars.yaml
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        regexp: "'^prelaunch_barbican_secret:'"
        value: "prelaunch_barbican_secret: {{ enable_barbican | default('false') }}"

    - name: Set ipa_ssh var in secrets.yaml
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/secrets.yaml"
        regexp: 'ipa_ssh:'
        value: "ipa_ssh: ssh -i {{ standalone_private_key | default('/home/zuul/src/github.com/openstack-k8s-operators/install_yamls/out/edpm/ansibleee-ssh-key-id_rsa') }} root@{{ standalone_ip }} podman exec -ti freeipa-server-container"

    - name: Configure whether to run octavia adoption
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        line: "octavia_adoption: {{ enable_octavia | default('true') }}"

    - name: Insert vars for data plane operator and os-net-config with zuul native undercloud node
      ansible.builtin.blockinfile:
        marker_begin: "BEGIN os-net-config vars"
        marker_end: "END os-net-config vars"
        path: "{{ rdo_dir }}/vars.yaml"
        block: |
          dataplane_os_net_config_iface: nic2
          dataplane_public_iface: eth1
          upstream_dns: "{{ standalone_gateway }}"
          dataplane_os_net_config_set_route: false
          os_cloud_name: overcloud
          edpm_user: zuul
          standalone_ip: "{{ standalone_ip | default('192.168.122.100') }}"
          neutron_physical_bridge_name: br-ex

    - name: Read the ssh key downloaded from undercloud
      ansible.builtin.slurp:
        path: "{{ standalone_private_key | default('/home/zuul/src/github.com/openstack-k8s-operators/install_yamls/out/edpm/ansibleee-ssh-key-id_rsa') }}"
      register: undercloud_key

    - name: Place undercloud key into secrets.yaml
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/secrets.yaml"
        regexp: '^edpm_encoded_privatekey:'
        value: "edpm_encoded_privatekey: \"{{ undercloud_key['content'] }}\""

    - name: Read the tripleo passwords downloaded from undercloud
      ansible.builtin.slurp:
        path: /home/zuul/tripleo-passwords.yaml
      register: tripleo_passwords

    - name: Set tripleo passwords in secrets.yaml
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/secrets.yaml"
        regexp: "{{ item.key }}:"
        line: "{{ item.key }}: {{ tripleo_passwords['content'] | b64decode | regex_search(item.regex + ': (.+)', '\\1') | first }}"
      loop:
        - key: 'source_db_root_password'
          regex: 'MysqlRootPassword'
        - key: 'aodh_password'
          regex: 'AodhPassword'
        - key: 'barbican_password'
          regex: 'BarbicanPassword'
        - key: 'ceilometer_password'
          regex: 'CeilometerPassword'
        - key: 'glance_password'
          regex: 'GlancePassword'
        - key: 'placement_password'
          regex: 'PlacementPassword'
        - key: 'cinder_password'
          regex: 'CinderPassword'
        - key: 'neutron_password'
          regex: 'NeutronPassword'
        - key: 'heat_password'
          regex: 'HeatPassword'
        - key: 'heat_stack_domain_admin_password'
          regex: 'HeatStackDomainAdminPassword'
        - key: 'heat_auth_encryption_key'
          regex: 'HeatAuthEncryptionKey'
        - key: 'manila_password'
          regex: 'ManilaPassword'
        - key: 'ironic_password'
          regex: 'IronicPassword'
        - key: 'nova_password'
          regex: 'NovaPassword'
        - key: 'octavia_password'
          regex: 'OctaviaPassword'
        - key: 'swift_password'
          regex: 'SwiftPassword'

    - name: Set controller ssh login vars controller1_ssh in secrets.yaml
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/secrets.yaml"
        regexp: "controller{{ item.ctrl }}_ssh:"
        value: "controller{{ item.ctrl }}_ssh: ssh -o StrictHostKeyChecking=accept-new -i {{ standalone_private_key | default('/home/zuul/src/github.com/openstack-k8s-operators/install_yamls/out/edpm/ansibleee-ssh-key-id_rsa') }} root@192.168.122.10{{ item.suffix }}"
      loop:
        - {ctrl: "1", suffix: "3"}
        - {ctrl: "2", suffix: "4"}
        - {ctrl: "3", suffix: "5"}

    - name: Install required packages
      become: true
      ansible.builtin.package:
        name:
          - python3
          - python3-pip

    - name: pip install openstackclient for keystone adoption on crc
      become: true
      ansible.builtin.pip:
        name: python-openstackclient
        executable: pip3

    - name: Insert edpm_bootstrap_command var into dataplane tests vars
      ansible.builtin.blockinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        marker_begin: "BEGIN edpm_bootstrap_command vars"
        marker_end: "END edpm_bootstrap_command vars"
        block: |
          edpm_bootstrap_command: |
            {{ edpm_bootstrap_command | indent(2) }}
      when: edpm_bootstrap_command is defined

    - name: Store node-exporter image in vars.yaml if defined
      when: edpm_telemetry_node_exporter_image is defined
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        line: "edpm_telemetry_node_exporter_image: {{ edpm_telemetry_node_exporter_image }}"

    - name: Insert edpm_container_registry_logins var into dataplane tests vars
      ansible.builtin.blockinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        marker_begin: "BEGIN edpm_container_registry_logins vars"
        marker_end: "END edpm_container_registry_logins vars"
        block: |
          edpm_container_registry_logins:
            {% for login, value in edpm_container_registry_logins.items() -%}
            {{ login | indent(2) }}:
              {{ value | to_nice_yaml | trim }}
            {% endfor -%}
      when:
        - edpm_container_registry_logins is defined
        - edpm_container_registry_logins is mapping

    - name: Fetch hash and set ci_testing_hash fact for periodic
      when: "'periodic' in zuul.job or (force_periodic|default(false)|bool)"
      block:
        - name: Fetch latest c9 or rhel9 antelope tag from dlrn
          when: dlrn_hash_tag is not defined
          ansible.builtin.uri:
            url: "https://{{ dpa_dlrn_server | default('trunk.rdoproject.org') }}/{{ dpa_dlrn_namespace | default('centos9-antelope') }}/{{ dpa_dlrn_tag | default('podified-ci-testing') }}/delorean.repo.md5"
            return_content: true
          register: latest_dlrn_tag
          until: latest_dlrn_tag.status == 200
          retries: 6
          delay: 5

        - name: Insert vars needed for periodic job into test vars.yaml
          ansible.builtin.blockinfile:
            marker_begin: "BEGIN periodic container vars"
            marker_end: "END periodic container vars"
            path: "{{ rdo_dir }}/vars.yaml"
            block: |
              periodic: true
              container_registry: "{{ dpa_container_registry | default('quay.rdoproject.org') }}"
              container_namespace: "{{ dpa_container_namespace | default('podified-antelope-centos9') }}"
              container_tag: {{ dlrn_hash_tag | default(latest_dlrn_tag.content) }}

        - name: Set timesync_ntp_servers if dpa_standalone_ntp_server set
          ansible.builtin.blockinfile:
            path: "{{ rdo_dir }}/vars.yaml"
            block: |
              timesync_ntp_servers:
                - hostname: {{ dpa_standalone_ntp_server }}
          when: dpa_standalone_ntp_server is defined

    - name: Insert vars needed to override edpm images into test vars.yaml
      when:
        - dpa_container_registry is defined
        - dpa_container_namespace is defined
      ansible.builtin.blockinfile:
        marker_begin: "BEGIN dataplane container vars"
        marker_end: "END dataplane container vars"
        path: "{{ rdo_dir }}/vars.yaml"
        block: |
          registry_name: "{{ dpa_container_registry }}"
          registry_namespace: "{{ dpa_container_namespace }}"
          image_tag: "{{ dpa_container_tag | default('current-podified') }}"

    - name: Insert edpm_container_registry_insecure_registries into dataplane test vars
      ansible.builtin.blockinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        marker_begin: "BEGIN edpm_container_registry_insecure_registries vars"
        marker_end: "END edpm_container_registry_insecure_registries vars"
        block: |
          edpm_container_registry_insecure_registries:
          {{ edpm_container_registry_insecure_registries | to_nice_yaml }}
      when:
        - edpm_container_registry_insecure_registries is defined

    - name: Store upstream dns server in vars.yaml if defined
      # we need to expose this so that the tests can then point the dnsmasq in
      # the controlplane to a working dns server to resolve names outside of
      # openstack
      when: upstream_control_plane_dns is defined
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        line: "upstream_dns: {{ upstream_control_plane_dns }}"

    - name: Set var to skip ansibleee csv patching
      when: dpa_skip_patch_csv| default(false) | bool
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        line: "skip_patching_ansibleee_csv: {{ dpa_skip_patch_csv | string | lower }}"

    - name: Check if edpm-ansible.yml file was created
      ansible.builtin.stat:
        path: "/home/zuul/ci-framework-data/artifacts/edpm-ansible.yml"
      register: edpm_ansible_file

    - name: Read edpm_ansible  file and extract ansibleee_runner img
      when: edpm_ansible_file.stat.exists
      block:
        - name: Read file
          ansible.builtin.slurp:
            path: "/home/zuul/ci-framework-data/artifacts/edpm-ansible.yml"
          register: edpm_ansible_output

        - name: Extract ansiblee_runner img
          vars:
            edpm_ansible_dict: "{{ edpm_ansible_output['content'] | b64decode | from_yaml }}"
          ansible.builtin.set_fact:
            ansibleee_runner_img: "{{ edpm_ansible_dict['cifmw_update_containers_ansibleee_image_url'] }}"

        - name: Insert ansibleee_runner_img var into vars.yaml
          ansible.builtin.lineinfile:
            path: "{{ rdo_dir }}/vars.yaml"
            line: "ansibleee_runner_img: {{ ansibleee_runner_img }}"

    - name: Workaround systemd-container
      # Note: This WA applies to version <= 17.1.3
      become: true
      delegate_to: "{{ item }}"
      ansible.builtin.dnf:
        name:
          - systemd-container
        state: present
      loop: "{{ groups['tripleo_computes'] | default([]) }}"

    - name: Update sos-reports package to use it with must-gather
      delegate_to: "{{ item }}"
      become: true
      ansible.builtin.dnf:
        name: sos
        state: latest
      loop: "{{ groups['tripleo_computes'] }}"

    - name: Disable OSP17.1 repos before running OSP 18 setup and adoption
      delegate_to: "{{ item }}"
      become: true
      ansible.builtin.shell: "subscription-manager repos --disable {{ osp_17_repos | join(' --disable ') }}"
      loop: "{{ groups['rh-subscription'] }}"

    - name: Disable OSP17.1 ceph repos before running OSP 18 setup and adoption
      when: use_ceph | default('false') | bool
      delegate_to: "{{ item }}"
      become: true
      ansible.builtin.shell: "subscription-manager repos --disable {{ osp_17_ceph_repos | join(' --disable ') }}"
      loop: "{{ groups['rh-subscription'] }}"

    - name: Insert adoption extra vars when defined
      when: adoption_extra_vars is defined
      ansible.builtin.blockinfile:
        marker_begin: "BEGIN adoption extra vars"
        marker_end: "END adoption extra vars"
        path: "{{ rdo_dir }}/vars.yaml"
        block: |
          {{ adoption_extra_vars }}

    - name: "Run data-plane-adoption tests from {{ dpa_dir }}"
      community.general.make:
        chdir: "{{ dpa_dir }}"
        target: "{{ dpa_test_suite | default('test-minimal') }}"
        params:
          TEST_CONFIG: "{{ dpa_test_ansible_cfg | default(rdo_dir  ~ '/ansible.cfg') }}"
          TEST_SECRETS: "{{ rdo_dir}}/secrets.yaml"
          TEST_VARS: "{{ rdo_dir }}/vars.yaml"
          TEST_INVENTORY: "tests/inventory.sample-crc-vagrant.yaml"
      register: make_res
      failed_when: '"failed=0" not in make_res.stdout_lines[-1]'

    - name: Unregister tripleo osp17.1 nodes with subscription-manager
      delegate_to: "{{ item }}"
      become: true
      failed_when: false
      ansible.builtin.shell: subscription-manager unregister
      loop: "{{ groups['rh-subscription'] }}"

    - name: Ceph Migration tests
      when: migrate_ceph | default(false) | bool
      block:
        - name: Set Ceph relevant network facts
          ansible.builtin.set_fact:
            ceph_storage_net_prefix: "172.18.0"
            ceph_nodes_ctlplane_prefix: "192.168.122"
            ceph_storage_vlan_id: 21

        - name: Ceph Migration - Build the list of src and target nodes
          ansible.builtin.blockinfile:
            marker_begin: "BEGIN ceph nodes vars"
            marker_end: "END ceph nodes vars"
            path: "{{ rdo_dir }}/ceph_overrides.yaml"
            block: |
              # CI related overrides:
              # - 172.18 is the Ceph cluster storage network on vlan_id: 21
              # - 172.18.0.200 is chosen as the client ip used to temporary
              #   access the ceph cluster from the current automation while
              #   migrating mons
              # - 172.18.0.100 is used as VIP on the storage network is RGW
              #   is present
              decomm_nodes:
                - {{ controller0_hostname }}
                - {{ controller1_hostname }}
                - {{ controller2_hostname }}
              target_nodes:
                - {{ compute0_hostname }}
                - {{ compute1_hostname }}
                - {{ compute2_hostname }}
              node_map:
                - {"hostname": "{{ controller0_hostname }}", "ip": "{{ ceph_storage_net_prefix }}.103"}
                - {"hostname": "{{ controller1_hostname }}", "ip": "{{ ceph_storage_net_prefix }}.104"}
                - {"hostname": "{{ controller2_hostname }}", "ip": "{{ ceph_storage_net_prefix }}.105"}
                - {"hostname": "{{ compute0_hostname }}", "ip": "{{ ceph_storage_net_prefix }}.106"}
                - {"hostname": "{{ compute1_hostname }}", "ip": "{{ ceph_storage_net_prefix }}.107"}
                - {"hostname": "{{ compute2_hostname }}", "ip": "{{ ceph_storage_net_prefix }}.108"}
              client_node: "{{ controller0_hostname }}"
              ceph_keep_mon_ipaddr: true
              ceph_net_manual_migration: true
              # override os-net-config conf file
              os_net_conf_path: "/etc/os-net-config/tripleo_config.yaml"
              ceph_storage_net_prefix: "{{ ceph_storage_net_prefix }}"
              ceph_client_ip: {{ ceph_storage_net_prefix }}.200
              vlan_id: {{ ceph_storage_vlan_id }}
              ceph_rgw_virtual_ips_list:
                - {{ ceph_storage_net_prefix }}.100/24

        - name: Generate a TripleO/Ceph compatible inventory
          ansible.builtin.template:
            src: "{{ playbook_dir }}/templates/ceph_inventory.j2"
            dest: "{{ rdo_dir }}/ceph_inventory.yaml"
          vars:
            inventory_map:
              - {"hostname": "{{ controller0_hostname }}", "ip": "{{ ceph_nodes_ctlplane_prefix }}.103"}
              - {"hostname": "{{ controller1_hostname }}", "ip": "{{ ceph_nodes_ctlplane_prefix }}.104"}
              - {"hostname": "{{ controller2_hostname }}", "ip": "{{ ceph_nodes_ctlplane_prefix }}.105"}
              - {"hostname": "{{ compute0_hostname }}", "ip": "{{ ceph_nodes_ctlplane_prefix }}.106"}
              - {"hostname": "{{ compute1_hostname }}", "ip": "{{ ceph_nodes_ctlplane_prefix }}.107"}
              - {"hostname": "{{ compute2_hostname }}", "ip": "{{ ceph_nodes_ctlplane_prefix }}.108"}

        - name: "Run data-plane-adoption Ceph migration tests from {{ dpa_dir }}"
          community.general.make:
            chdir: "{{ dpa_dir }}"
            target: "test-ceph-migration"
            params:
              TEST_CONFIG: "{{ dpa_test_ansible_cfg | default(rdo_dir  ~ '/ansible.cfg') }}"
              TEST_SECRETS: "{{ rdo_dir}}/secrets.yaml"
              TEST_VARS: "{{ rdo_dir }}/vars.yaml"
              TEST_CEPH_OVERRIDES: "{{ rdo_dir }}/ceph_overrides.yaml"
              TEST_INVENTORY: "{{ rdo_dir }}/ceph_inventory.yaml"
          register: make_ceph_res
          failed_when: '"failed=0" not in make_ceph_res.stdout_lines[-1]'

    - name: Call test role
      when:
        - dpa_run_post_adoption_tempest | default(true) | bool
        - cifmw_run_test_role is defined
      block:
        # Tempest role does not support use of both main skiplist and exclude list
        # TODO (anbanerj): Remove this task when tempest supports it
        - name: Load skiplist from list of known failures
          ansible.builtin.slurp:
            path: "{{ framework_dir }}/roles/test_operator/files/list_skipped.yml"
          register: skiplist_file

        - name: Slurp data from list_skipped.yml
          ansible.builtin.set_fact:
            skiplist: "{{ skiplist_file['content'] | b64decode | from_yaml }}"

        - name: Get names of excluded tests
          no_log: true
          ansible.builtin.set_fact:
            test_names: "{{ test_names | default([]) + [item.test] }}"
          loop: "{{ skiplist.known_failures }}"

        - name: Merge tests from exclude list and known skiplist
          when: cifmw_test_operator_tempest_exclude_list is defined
          ansible.builtin.set_fact:
            test_names: "{{ test_names | default([]) + [item] }}"
          loop: "{{ cifmw_test_operator_tempest_exclude_list | trim | split('\n') }}"

        - name: Convert list of tests to string to pass to test-operator
          set_fact:
            exclude_list: |
              {% for item in test_names %}
                {{ item }}
              {% endfor %}

        # Remove this before merging
        - name: Display "exclude_list"
          debug:
            var: exclude_list

        - name: Dump cifmw test operator parameters to a file
          ansible.builtin.template:
            src: "{{ playbook_dir }}/files/ci_framework_test_operator_params.yaml.j2"
            dest: "{{ cifmw_test_operator_parameters_file | default('/home/zuul/test_operator_vars.yaml')}}"

        - name: Execute pre_tests hook
          when:
            - pre_tests is defined
          block:
            - name: Dump hooks parameters to a file
              ansible.builtin.template:
                src: "{{ playbook_dir }}/files/ci_framework_hooks_params.yaml.j2"
                dest: "{{ cifmw_hooks_parameters_file | default('/home/zuul/hooks_vars.yaml')}}"

            - name: Call pre_tests hook
              ansible.builtin.command: >
                ansible-playbook {{ rdo_dir }}/ci_framework_call_hook.yaml
                -e "step=pre_tests"
                -e "@{{cifmw_hooks_parameters_file | default('/home/zuul/hooks_vars.yaml')}}"
              args:
                chdir: "{{ framework_dir }}"

        - name: Call test role with ci_framework_call_test_role
          ansible.builtin.shell: >
            ansible-playbook {{ rdo_dir }}/ci_framework_call_test_role.yaml -e "job_name={{ zuul.job }}"
            -e "test_role={{ cifmw_run_test_role | default('tempest') }}"
            -e "@{{ cifmw_datadir }}/artifacts/parameters/zuul-params.yml"
            -e "@{{cifmw_test_operator_parameters_file | default('/home/zuul/test_operator_vars.yaml')}}"
          args:
            chdir: "{{ framework_dir }}"

    - name: Mark job as successful
      when: not force_job_failure | default(false)
      ansible.builtin.file:
        path: "{{ ansible_user_dir }}/cifmw-success"
        state: touch
