- hosts: all
  vars:
    framework_dir: "/home/zuul/src/github.com/openstack-k8s-operators/ci-framework"
  tasks:
    - name: Configure qemu for extracted crc
      when: "'extracted-crc' in job_name"
      block:
        - name: Ensure qemu is configured to use the zuul user
          become: true
          ansible.builtin.lineinfile:
            path: "/etc/libvirt/qemu.conf"
            regexp: "{{ item.regexp }}"
            line: "{{ item.line }}"
            backrefs: true
          loop:
            - {regexp: '^#user =', line: 'user = "zuul"'}
            - {regexp: '^#group =', line: 'group = "libvirt"'}

        - name: Restart libvirtd service to apply the changes
          become: true
          ansible.builtin.service:
            name: libvirtd
            state: restarted

        - name: Undefine existing default network
          community.libvirt.virt_net:
            name: default
            state: absent

        - name: Recreate libvirt default with the correct network ip range
          community.libvirt.virt_net:
            name: default
            state: present
            xml: '{{ lookup("file", "libvirt_default_network.xml") }}'

        - name: Activate default network
          community.libvirt.virt_net:
            name: default
            state: active

        - name: Set default network to autostart
          community.libvirt.virt_net:
            name: default
            autostart: true

        - name: Catch packets to multicast adresses
          become: true
          ansible.builtin.iptables:
            table: "nat"
            chain: "LIBVIRT_PRT"
            source: "192.168.122.0/24"
            destination: "224.0.0.0/24"
            jump: "RETURN"

        - name: Catch packets to broadcast adresses
          become: true
          ansible.builtin.iptables:
            table: "nat"
            chain: "LIBVIRT_PRT"
            source: "192.168.122.0/24"
            destination: "255.255.255.255/32"
            jump: "RETURN"

        - name: Masquerade outgoing tcp packets
          become: true
          ansible.builtin.iptables:
            table: "nat"
            chain: "LIBVIRT_PRT"
            source: "192.168.122.0/24"
            destination: "!192.168.122.0/24"
            jump: "MASQUERADE"
            protocol: tcp
            to_ports: "1024-65535"

        - name: Masquerade outgoing udp packets
          become: true
          ansible.builtin.iptables:
            table: "nat"
            chain: "LIBVIRT_PRT"
            source: "192.168.122.0/24"
            destination: "!192.168.122.0/24"
            jump: "MASQUERADE"
            protocol: udp
            to_ports: "1024-65535"

        - name: Masquerade outgoing packets
          become: true
          ansible.builtin.iptables:
            table: "nat"
            chain: "LIBVIRT_PRT"
            source: "192.168.122.0/24"
            destination: "!192.168.122.0/24"
            jump: "MASQUERADE"

        - name: Allow virbr1 to receive packets from the plublic interface
          become: true
          ansible.builtin.iptables:
            table: "filter"
            chain: "LIBVIRT_FWI"
            destination: "192.168.122.0/24"
            in_interface: "eth0"
            out_interface: "virbr1"
            action: "insert"
            rule_num: 1
            jump: "ACCEPT"

        - name: Allow virbr1 to send packets to the plublic interface
          become: true
          ansible.builtin.iptables:
            table: "filter"
            chain: "LIBVIRT_FWO"
            source: "192.168.122.0/24"
            out_interface: "eth0"
            in_interface: "virbr1"
            action: "insert"
            rule_num: 1
            jump: "ACCEPT"

    - name: Create a vm and deploy standalone on it with network isolation
      ansible.builtin.include_role:
        name: 'install_yamls_makes'
        tasks_from: 'make_standalone.yml'
      vars:
        make_standalone_params:
          EDPM_COMPUTE_VCPUS: 8
          EDPM_COMPUTE_RAM: 7
          EDPM_COMPUTE_DISK_SIZE: 70
          NTP_SERVER: "{{ ntp_override | default('pool.ntp.org') }}"
          REPO_SETUP_CMDS: "{{ repo_setup_commands | default('/tmp/standalone-repos') }}"
          GATEWAY: "{{ standalone_gateway }}"
          IP: "{{ standalone_ip }}"
          DATAPLANE_DNS_SERVER: "{{ standalone_gateway }}"

    - name: Create a snapshot of the standalone vm in case we want to retry the adoption process
      ansible.builtin.include_role:
        name: 'install_yamls_makes'
        tasks_from: 'make_standalone_snapshot.yml'
