- hosts: rh-subscription
  vars:
    cifmw_installyamls_repos: "github.com/openstack-k8s-operators/install_yamls"
    ctlplane_ip: "192.168.122.{{ address_suffix }}"
    ctlplane_cidr: 24
    ctlplane_vip: 192.168.122.99
    gateway_ip: "{{ standalone_gateway }}"
    dns_server: "{{ standalone_gateway }}"
    interface_mtu: 1500
    ip_address_suffix: "{{ address_suffix }}"
    os_net_config_iface: nic2
    standalone_vm: false
    additional_networks: []
    # NOTE(bogdando): for local libvirt setups, we need all tripleo_network flags enabled
    # this replicates the current CI setup.
    manage_default_route: "{{ tripleo_network.manage_default_route | default(false) | bool }}"
    tripleo_networking: "{{ tripleo_network.configure_networking | default(false) | bool }}"
  tasks:
    - name: Get current /etc/redhat-release
      ansible.builtin.command: cat /etc/redhat-release

    - name: Clean dnf cache before enabling repos
      become: true
      ansible.builtin.command: yum clean all

    - name: Enable baseos subscription
      become: true
      community.general.rhsm_repository:
        name: "rhel-9-for-{{ ansible_architecture }}-baseos-eus-rpms"
        state: enabled
      retries: 5
      delay: 30
      register: _rhsm_baseos
      until: not _rhsm_baseos.failed

    - name: Enable appstream subscription
      become: true
      community.general.rhsm_repository:
        name: "rhel-9-for-{{ ansible_architecture }}-appstream-eus-rpms"
        state: enabled
      retries: 5
      delay: 30
      register: _rhsm_appstream
      until: not _rhsm_appstream.failed

    - name: Enable highavailability subscription
      become: true
      community.general.rhsm_repository:
        name: "rhel-9-for-{{ ansible_architecture }}-highavailability-eus-rpms"
      retries: 5
      delay: 30
      register: _rhsm_ha
      until: not _rhsm_ha.failed

    - name: Enable fast datapath to install openvswitch
      become: true
      community.general.rhsm_repository:
        name: "fast-datapath-for-rhel-9-{{ ansible_architecture }}-rpms"
        state: enabled
      retries: 5
      delay: 30
      register: _rhsm_fast_datapath
      until: not _rhsm_fast_datapath.failed

    - name: Install openstack repo
      become: true
      community.general.rhsm_repository:
        name: "openstack-17.1-for-rhel-9-{{ ansible_architecture }}-rpms"
        state: enabled
      retries: 5
      delay: 30
      register: _rhsm_openstack
      until: not _rhsm_openstack.failed

    - name: Get all enabled repos
      become: true
      ansible.builtin.shell: |
        yum repolist --enabled

    - name: Install openvswitch, os-net-config and ansible-core
      become: true
      ansible.builtin.dnf:
        name:
          - openvswitch
          - os-net-config
          - ansible-core
        state: present
        update_cache: true
      retries: 5
      delay: 30
      register: _openvswitch_install
      until: _openvswitch_install is success

    - name: Install ansible.posix collection from ansible-galaxy
      become: true
      ansible.builtin.shell: |
        ansible-galaxy collection install ansible.posix
      retries: 5
      delay: 30
      register: _galaxy_install
      until: _galaxy_install.rc == 0

    - name: Create os-net-config dir
      become: true
      ansible.builtin.file:
        path: /etc/os-net-config
        state: directory

    - name: Template out the os-net-config config from install_yamls src checkout
      become: true
      ansible.builtin.template:
        src: "{{ zuul.executor.src_root }}/{{ cifmw_installyamls_repos }}/devsetup/tripleo/{{ os_net_config_file }}"
        dest: /etc/os-net-config/tripleo_config.yaml

    - name: Remove ci-framework created Network Manager connections
      failed_when: false
      become: true
      community.general.nmcli:
        conn_name: "ci-private-network{{ item }}"
        state: absent
      loop:
        - " "
        - "-20"
        - "-21"
        - "-22"
        - "-23"

    - name: Start network and openvswitch services
      become: true
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: started
      loop:
        - network
        - openvswitch

    - name: Run os-net-config to create tripleo networking
      become: true
      ansible.builtin.shell: |
        os-net-config -v -c /etc/os-net-config/tripleo_config.yaml

    - name: Sanity check standalone can ping crc and controller nodes on 192.168.122.0/24
      ansible.builtin.shell: |
        ip a
        ping -c 2 -W 2 192.168.122.10
        ping -c 2 -W 2 192.168.122.11

    - name: Slurp controller public key for ssh access to standalone
      delegate_to: controller
      ansible.builtin.slurp:
        path: /home/zuul/.ssh/id_rsa.pub
      register: controller_ssh_pub

    - name: Place controller public key in authorized_keys for zuul and root
      become: "{{ item == 'root' }}"
      ansible.posix.authorized_key:
        user: "{{ item }}"
        key: "{{ controller_ssh_pub['content'] | b64decode | trim }}"
      loop:
        - zuul
        - root

    - name: Put undercloud zuul pub key into overcloud nodes and set .ctlplane hostnames
      when: "inventory_hostname != 'undercloud'"
      block:
        - name: Slurp undercloud public key for ssh access from undercloud to overcloud nodes
          delegate_to: undercloud
          ansible.builtin.slurp:
            path: /home/zuul/.ssh/id_rsa.pub
          register: undercloud_ssh_pub

        - name: Place undercloud public key in authorized_keys for zuul and root
          become: "{{ item == 'root' }}"
          ansible.posix.authorized_key:
            user: "{{ item }}"
            key: "{{ undercloud_ssh_pub['content'] | b64decode | trim }}"
          loop:
            - zuul
            - root

        - name: Slurp overcloud ansible hostname for hostnamemap fom etc hostname
          ansible.builtin.slurp:
            path: /etc/hostname
          register: overcloud_hostname

        - name: Place ansible hostname into zuul home directory
          ansible.builtin.shell: |
            hostname="{{ overcloud_hostname['content'] | b64decode | trim }}"
            hostname_str_array=(${hostname//./ })
            echo ${hostname_str_array[0]} > /home/zuul/ansible_hostname

        - name: "Set expected overcloud hostname with {{ cloud_domain | default('localdomain') }}"
          become: true
          ansible.builtin.shell: |
            hostname=$(cat /home/zuul/ansible_hostname)
            hostnamectl hostname "$hostname.{{ cloud_domain | default('localdomain') }}"
