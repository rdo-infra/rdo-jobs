- hosts: "{{ controller_host | default('controller') }}"
  vars:
    dpa_dir: "{{ dpa_dir_override | default('/home/zuul/src/github.com/openstack-k8s-operators/data-plane-adoption') }}"
    rdo_dir: "/home/zuul/src/review.rdoproject.org/rdo-jobs/playbooks/data_plane_adoption"
    framework_dir: "/home/zuul/src/github.com/openstack-k8s-operators/ci-framework"
    cifmw_datadir: "/home/zuul/ci-framework-data"
  tasks:
    - name: Run test preparation in undercloud vm
      ansible.builtin.shell: >-
        ansible-playbook {{ rdo_dir }}/undercloud_prepare_tests.yaml
        -i {{ inventory_vms | default('/home/zuul/vms-inventory.yaml') }}
        -e undercloud_host={{ undercloud_host | default('osp-underclouds') }}
        -e controller_public_key={{ controller_public_key | default('/home/zuul/.ssh/id_rsa.pub') }}

    - name: Set storage_class_name in vars.yaml
      when: storage_class_name is defined
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        regexp: "'^storage_class_name:"
        value: "storage_class_name: {{ storage_class_name }}"

    - name: Set TLS Everywhere in vars.yaml
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        regexp: "'^enable_tlse:'"
        value: "enable_tlse: {{ enable_tls | default('false') }}"

    - name: Set neutron_qe_test in vars.yaml
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        regexp: "'^neutron_qe_test:'"
        value: "neutron_qe_test: {{ neutron_qe_test | default('false') }}"

    - name: Set neutron_qe_dir in vars.yaml
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        regexp: "'^neutron_qe_dir:'"
        value: "neutron_qe_dir: {{ neutron_qe_dir | default('false') }}"

    - name: Set prelaunch_barbican_secret in vars.yaml
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        regexp: "'^prelaunch_barbican_secret:'"
        value: "prelaunch_barbican_secret: {{ enable_barbican | default('false') }}"

    - name: Set ipa_ssh var in secrets.yaml
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/secrets.yaml"
        regexp: 'ipa_ssh:'
        value: "ipa_ssh: ssh -i {{ standalone_private_key | default('/home/zuul/src/github.com/openstack-k8s-operators/install_yamls/out/edpm/ansibleee-ssh-key-id_rsa') }} root@{{ standalone_ip }} podman exec -ti freeipa-server-container"

    - name: Configure whether to run octavia adoption
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        line: "octavia_adoption: {{ enable_octavia | default('true') }}"

    - name: Insert vars for data plane operator and os-net-config with zuul native undercloud node
      ansible.builtin.blockinfile:
        marker_begin: "BEGIN os-net-config vars"
        marker_end: "END os-net-config vars"
        path: "{{ rdo_dir }}/vars.yaml"
        block: |
          dataplane_os_net_config_iface: nic2
          dataplane_public_iface: eth1
          dataplane_os_net_config_set_route: false
          edpm_user: zuul
          neutron_physical_bridge_name: br-ex

    - name: Read the ssh key downloaded from undercloud
      ansible.builtin.slurp:
        path: "{{ standalone_private_key | default('/home/zuul/src/github.com/openstack-k8s-operators/install_yamls/out/edpm/ansibleee-ssh-key-id_rsa') }}"
      register: undercloud_key

    - name: Place undercloud key into secrets.yaml
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/secrets.yaml"
        regexp: '^edpm_encoded_privatekey:'
        value: "edpm_encoded_privatekey: \"{{ undercloud_key['content'] }}\""

    - name: Read the tripleo passwords downloaded from undercloud
      ansible.builtin.slurp:
        path: /home/zuul/tripleo-passwords.yaml
      register: tripleo_passwords

    - name: Set tripleo passwords in secrets.yaml
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/secrets.yaml"
        regexp: "{{ item.key }}:"
        line: "{{ item.key }}: {{ tripleo_passwords['content'] | b64decode | regex_search(item.regex + ': (.+)', '\\1') | first }}"
      loop:
        - key: 'source_db_root_password'
          regex: 'MysqlRootPassword'
        - key: 'aodh_password'
          regex: 'AodhPassword'
        - key: 'barbican_password'
          regex: 'BarbicanPassword'
        - key: 'ceilometer_password'
          regex: 'CeilometerPassword'
        - key: 'glance_password'
          regex: 'GlancePassword'
        - key: 'placement_password'
          regex: 'PlacementPassword'
        - key: 'cinder_password'
          regex: 'CinderPassword'
        - key: 'neutron_password'
          regex: 'NeutronPassword'
        - key: 'heat_password'
          regex: 'HeatPassword'
        - key: 'heat_auth_encryption_key'
          regex: 'HeatAuthEncryptionKey'
        - key: 'manila_password'
          regex: 'ManilaPassword'
        - key: 'ironic_password'
          regex: 'IronicPassword'
        - key: 'nova_password'
          regex: 'NovaPassword'
        - key: 'octavia_password'
          regex: 'OctaviaPassword'
        - key: 'swift_password'
          regex: 'SwiftPassword'

    - name: Set controller ssh login vars controller1_ssh in secrets.yaml
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/secrets.yaml"
        regexp: "controller{{ item.ctrl }}_ssh:"
        value: "controller{{ item.ctrl }}_ssh: ssh -i {{ standalone_private_key | default('/home/zuul/src/github.com/openstack-k8s-operators/install_yamls/out/edpm/ansibleee-ssh-key-id_rsa') }} -o StrictHostKeyChecking=accept-new root@192.168.122.10{{ item.suffix }}"
      loop:
        - {ctrl: "1", suffix: "3"}
        - {ctrl: "2", suffix: "4"}
        - {ctrl: "3", suffix: "5"}

    - name: Insert edpm_bootstrap_command var into dataplane tests vars
      ansible.builtin.blockinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        marker_begin: "BEGIN edpm_bootstrap_command vars"
        marker_end: "END edpm_bootstrap_command vars"
        block: |
          edpm_bootstrap_command: |
            {{ edpm_bootstrap_command | indent(2) }}
      when: edpm_bootstrap_command is defined

    - name: Store node-exporter image in vars.yaml if defined
      when: edpm_telemetry_node_exporter_image is defined
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        line: "edpm_telemetry_node_exporter_image: {{ edpm_telemetry_node_exporter_image }}"

    - name: Insert edpm_container_registry_logins var into dataplane tests vars
      ansible.builtin.blockinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        marker_begin: "BEGIN edpm_container_registry_logins vars"
        marker_end: "END edpm_container_registry_logins vars"
        block: |
          edpm_container_registry_logins:
            {% for login, value in edpm_container_registry_logins.items() -%}
            {{ login | indent(2) }}:
              {{ value | to_nice_yaml | trim }}
            {% endfor -%}
      when:
        - edpm_container_registry_logins is defined
        - edpm_container_registry_logins is mapping

    - name: Fetch latest c9 or rhel9 antelope tag from dlrn
      when: dlrn_hash_tag is not defined
      ansible.builtin.uri:
        url: "https://{{ dpa_dlrn_server | default('trunk.rdoproject.org') }}/{{ dpa_dlrn_namespace | default('centos9-antelope') }}/{{ dpa_dlrn_tag | default('podified-ci-testing') }}/delorean.repo.md5"
        return_content: true
      register: latest_dlrn_tag
      until: latest_dlrn_tag.status == 200
      retries: 6
      delay: 5

    - name: Insert vars needed for periodic job into test vars.yaml
      ansible.builtin.blockinfile:
        marker_begin: "BEGIN periodic container vars"
        marker_end: "END periodic container vars"
        path: "{{ rdo_dir }}/vars.yaml"
        block: |
          periodic: true
          container_registry: "{{ dpa_container_registry | default('quay.rdoproject.org') }}"
          container_namespace: "{{ dpa_container_namespace | default('podified-antelope-centos9') }}"
          container_tag: {{ dlrn_hash_tag | default(latest_dlrn_tag.content) }}

    - name: Set timesync_ntp_servers if dpa_standalone_ntp_server set
      ansible.builtin.blockinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        block: |
          timesync_ntp_servers:
            - hostname: {{ dpa_standalone_ntp_server }}
      when: dpa_standalone_ntp_server is defined

    - name: Insert vars needed to override edpm images into test vars.yaml
      when:
        - dpa_container_registry is defined
        - dpa_container_namespace is defined
      ansible.builtin.blockinfile:
        marker_begin: "BEGIN dataplane container vars"
        marker_end: "END dataplane container vars"
        path: "{{ rdo_dir }}/vars.yaml"
        block: |
          registry_name: "{{ dpa_container_registry }}"
          registry_namespace: "{{ dpa_container_namespace }}"
          image_tag: "{{ dpa_container_tag | default('current-podified') }}"

    - name: Insert edpm_container_registry_insecure_registries into dataplane test vars
      ansible.builtin.blockinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        marker_begin: "BEGIN edpm_container_registry_insecure_registries vars"
        marker_end: "END edpm_container_registry_insecure_registries vars"
        block: |
          edpm_container_registry_insecure_registries:
          {{ edpm_container_registry_insecure_registries | to_nice_yaml }}
      when:
        - edpm_container_registry_insecure_registries is defined

    - name: Store upstream dns server in vars.yaml if defined
      # we need to expose this so that the tests can then point the dnsmasq in
      # the controlplane to a working dns server to resolve names outside of
      # openstack
      when: upstream_control_plane_dns is defined
      ansible.builtin.lineinfile:
        path: "{{ rdo_dir }}/vars.yaml"
        line: "upstream_dns: {{ upstream_control_plane_dns }}"

    - name: Check if edpm-ansible.yml file was created
      ansible.builtin.stat:
        path: "/home/zuul/ci-framework-data/artifacts/edpm-ansible.yml"
      register: edpm_ansible_file

    - name: Read edpm_ansible  file and extract ansibleee_runner img
      when: edpm_ansible_file.stat.exists
      block:
        - name: Read file
          ansible.builtin.slurp:
            path: "/home/zuul/ci-framework-data/artifacts/edpm-ansible.yml"
          register: edpm_ansible_output

        - name: Extract ansiblee_runner img
          vars:
            edpm_ansible_dict: "{{ edpm_ansible_output['content'] | b64decode | from_yaml }}"
          ansible.builtin.set_fact:
            ansibleee_runner_img: "{{ edpm_ansible_dict['cifmw_update_containers_ansibleee_image_url'] }}"

        - name: Insert ansibleee_runner_img var into vars.yaml
          ansible.builtin.lineinfile:
            path: "{{ rdo_dir }}/vars.yaml"
            line: "ansibleee_runner_img: {{ ansibleee_runner_img }}"

    - name: Insert adoption extra vars when defined
      when: adoption_extra_vars is defined
      ansible.builtin.blockinfile:
        marker_begin: "BEGIN adoption extra vars"
        marker_end: "END adoption extra vars"
        path: "{{ rdo_dir }}/vars.yaml"
        block: |
          {{ adoption_extra_vars }}

    - name: "Run data-plane-adoption tests from {{ dpa_dir }}"
      community.general.make:
        chdir: "{{ dpa_dir }}"
        target: "{{ dpa_test_suite | default('test-minimal') }}"
        params:
          TEST_CONFIG: "{{ dpa_test_ansible_cfg | default(rdo_dir  ~ '/ansible.cfg') }}"
          TEST_SECRETS: "{{ rdo_dir}}/secrets.yaml"
          TEST_VARS: "{{ rdo_dir }}/vars.yaml"
          TEST_INVENTORY: "tests/inventory.sample-crc-vagrant.yaml"
      register: make_res
      failed_when: '"failed=0" not in make_res.stdout_lines[-1]'

    - name: Call test role
      when:
        - dpa_run_post_adoption_tempest | default(true) | bool
        - cifmw_run_test_role is defined
      block:
        # Tempest role does not support use of both main skiplist and exclude list
        # TODO (anbanerj): Remove this task when tempest supports it
        - name: Load skiplist from list of known failures
          ansible.builtin.slurp:
            path: "{{ framework_dir }}/roles/test_operator/files/list_skipped.yml"
          register: skiplist_file

        - name: Slurp data from list_skipped.yml
          ansible.builtin.set_fact:
            skiplist: "{{ skiplist_file['content'] | b64decode | from_yaml }}"

        - name: Get names of excluded tests
          no_log: true
          ansible.builtin.set_fact:
            test_names: "{{ test_names | default([]) + [item.test] }}"
          loop: "{{ skiplist.known_failures }}"

        - name: Merge tests from exclude list and known skiplist
          when: cifmw_test_operator_tempest_exclude_list is defined
          ansible.builtin.set_fact:
            test_names: "{{ test_names | default([]) + [item] }}"
          loop: "{{ cifmw_test_operator_tempest_exclude_list | trim | split('\n') }}"

        - name: Convert list of tests to string to pass to test-operator
          set_fact:
            exclude_list: |
              {% for item in test_names %}
                {{ item }}
              {% endfor %}

        - name: Execute pre_tests hook
          when:
            - pre_tests is defined
          block:
            - name: Dump hooks parameters to a file
              ansible.builtin.template:
                src: "{{ playbook_dir }}/files/ci_framework_hooks_params.yaml.j2"
                dest: "{{ cifmw_test_operator_parameters_file | default('/home/zuul/hooks_vars.yaml')}}"

            - name: Call pre_tests hook
              ansible.builtin.command: >
                ansible-playbook {{ rdo_dir }}/ci_framework_call_hook.yaml
                -e "step=pre_tests"
                -e "@{{cifmw_hooks_parameters_file | default('/home/zuul/hooks_vars.yaml')}}"
              args:
                chdir: "{{ framework_dir }}"

        - name: Dump cifmw test operator parameters to a file
          ansible.builtin.template:
            src: "{{ playbook_dir }}/files/ci_framework_test_operator_params.yaml.j2"
            dest: "{{ cifmw_test_operator_parameters_file | default('/home/zuul/test_operator_vars.yaml')}}"

        - name: Call test role with ci_framework_call_test_role
          ansible.builtin.shell: >
            ansible-playbook {{ rdo_dir }}/ci_framework_call_test_role.yaml -e "job_name={{ zuul.job }}"
            -e "test_role={{ cifmw_run_test_role | default('tempest') }}"
            -e "@{{cifmw_test_operator_parameters_file | default('/home/zuul/test_operator_vars.yaml')}}"
          args:
            chdir: "{{ framework_dir }}"

    - name: Call polarion reporting role
      when:
        - cifmw_polarion_report_results | default(false)
      block:
        - name: Create cifmw polarion parameters file
          ansible.builtin.template:
            src: "{{ playbook_dir }}/files/ci_framework_polarion_params.yaml.j2"
            dest: "{{ cifmw_polarion_params_file | default('/home/zuul/polarion_params.yaml') }}"

        - name: Call cifmw polarion role to report tempest test results
          ansible.builtin.shell: >
            ansible-playbook {{ rdo_dir }}/ci_framework_report_polarion.yaml -e "job_name={{ zuul.job }}" -e "build_uuid={{ zuul.build }}" -e "@{{cifmw_polarion_params_file | default('/home/zuul/polarion_params.yaml')}}" -e "@{{ cifmw_datadir }}/artifacts/parameters/zuul-params.yml"
          args:
            chdir: "{{ framework_dir }}"
