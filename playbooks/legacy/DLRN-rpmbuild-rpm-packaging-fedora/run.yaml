---
- hosts: all
  name: Autoconverted job legacy-DLRN-rpmbuild-rpm-packaging-fedora from old job DLRN-rpmbuild-rpm-packaging-fedora
  tasks:
    - name: Install pre-requisites for mock
      package:
        name:
          - createrepo
          - mock
          - redhat-rpm-config
          - rpmdevtools
          - spectool
        state: present
      become: true

    - name: Ensure user in mock group
      user:
        name: "{{ ansible_user }}"
        groups: mock
        append: true
      become: true

    - name: write fedora.cfg
      shell:
        cmd: |
          cat << EOF > scripts/fedora.cfg
          config_opts['root'] = 'dlrn-fedora-x86_64'
          config_opts['target_arch'] = 'x86_64'
          config_opts['legal_host_arches'] = ('x86_64',)
          config_opts['chroot_setup_cmd'] = \
          'install basesystem rpm-build python2-devel gcc make python-sqlalchemy python-webob ghostscript \
          graphviz python-sphinx python-eventlet python-six python-pbr python3-pbr git coreutils glibc-langpack-en openstack-macros'
          config_opts['dist'] = 'f28'  # only useful for --resultdir variable subst
          config_opts['extra_chroot_dirs'] = [ '/run/lock', ]
          config_opts['releasever'] = '28'
          config_opts['plugin_conf']['tmpfs_enable'] = True
          config_opts['plugin_conf']['tmpfs_opts'] = {}
          config_opts['plugin_conf']['tmpfs_opts']['required_ram_mb'] = 4096
          config_opts['plugin_conf']['tmpfs_opts']['max_fs_size'] = '4g'
          config_opts['plugin_conf']['tmpfs_opts']['mode'] = '0755'
          config_opts['plugin_conf']['tmpfs_opts']['keep_mounted'] = True
          config_opts['package_manager'] = 'dnf'
          config_opts['priorities.conf'] = """
          [main]
          enabled = 1
          check_obsoletes = 1
          """
          config_opts['yum.conf'] = """
          [main]
          keepcache=1
          debuglevel=2
          reposdir=/dev/null
          logfile=/var/log/yum.log
          retries=20
          obsoletes=1
          gpgcheck=0
          assumeyes=1
          plugins=1
          syslog_ident=mock
          syslog_device=
          # repos
          """
          EOF
        chdir: "{{ ansible_user_dir }}/{{ zuul.projects['softwarefactory-project.io/DLRN'].src_dir }}"

    - name: run DLRN
      shell:
        cmd: |
          set +e
          # FIXME(jpena) some packages are moving to use singlespec, which
          # requires an up to date openstack-macros package in the builder,
          # and not just in the mock buildroot.
          sudo dnf -y install https://fedora-rpm-packaging-ci.rdoproject.org/repos/deps/openstack-macros-2019.2.1-0.20190701082914.ce6a105.fc28.noarch.rpm
          # Setup virtualenv with tox and use it
          tox -epy27 --notest
          . .tox/py27/bin/activate
          # Use latest pymod2pkg from Git, to avoid waiting for new releases
          pip install --upgrade git+https://opendev.org/openstack/pymod2pkg
          # Prepare config
          if [[ "{{ zuul.branch }}" =~ stable/ ]]; then    # stable branch
              repo_branch=$(sed "s#stable/##" <<< "{{ zuul.branch }}")
              # We only support Ocata and later as stable repos
              if [ "$repo_branch" = "newton" ]; then
                exit 0
              fi
              baseurl="https://fedora-rpm-packaging-ci.rdoproject.org//$repo_branch/repos/"
              use_version_from_spec="1"
          else
              # master
              baseurl="https://fedora-rpm-packaging-ci.rdoproject.org//repos/"
              use_version_from_spec="1"
          fi

          repo="http://opendev.org/openstack/rpm-packaging"
          directory="/openstack"
          skip="openstack-macros"
          pkginfo_driver="dlrn.drivers.gitrepo.GitRepoDriver"
          branch="{{ zuul.branch }}"
          target=fedora

          # Update the configuration
          sed -i "s%#repo=.*%repo=$repo%" projects.ini
          sed -i "s%#directory=.*%directory=$directory%" projects.ini
          sed -i "s%#skip=.*%skip=$skip%" projects.ini
          sed -i "s%#use_version_from_spec=.*%use_version_from_spec=$use_version_from_spec%" projects.ini
          sed -i "s%#keep_tarball=.*%keep_tarball=1%" projects.ini
          sed -i "s%pkginfo_driver=.*%pkginfo_driver=$pkginfo_driver%" projects.ini
          sed -i "s%baseurl=.*%baseurl=$baseurl%" projects.ini
          sed -i "s%source=.*%source=$branch%" projects.ini
          sed -i "s%distro=.*%distro=$branch%" projects.ini
          sed -i "s%target=.*%target=$target%" projects.ini

          # Prepare directories
          mkdir -p data/repos

          if [ -d "{{ ansible_user_dir }}/{{ zuul.projects['opendev.org/openstack/rpm-packaging'].src_dir }}" ]; then
            ln -s "{{ ansible_user_dir }}/{{ zuul.projects['opendev.org/openstack/rpm-packaging'].src_dir }}" data/package_info
          else
            # We are outside the gate, just do a regular git clone
            pushd data/
            # rm -rf first for idempotency
            rm -rf package_info
            git clone "https://opendev.org/openstack/rpm-packaging" package_info
            cd package_info
            git checkout $branch
            popd
          fi

          # Find out which packages are being tested
          pushd data/package_info
          CHANGED_FILES=$(git diff --name-only --diff-filter=ACMTR HEAD~1)
          PACKAGES_TO_BUILD=""
          for spec in $CHANGED_FILES; do
            filename=$(echo $spec | awk -F/ '{print $NF}')
            extension=$(echo $filename | awk -F. '{print $NF}')
            if [ "$extension" = "j2" ]; then
                # Remove the .spec.j2 extension
                PACKAGES_TO_BUILD="$PACKAGES_TO_BUILD --package-name $(echo $filename | awk 'BEGIN{FS=OFS="."}{NF--; NF--; print}')"
            fi
          done
          popd
          if [ ! -n "$PACKAGES_TO_BUILD" ]; then
            exit 0
          fi

          timeout --signal=SIGKILL 10800 dlrn --config-file projects.ini --head-only $PACKAGES_TO_BUILD --dev --local --verbose-build --sequential
          ret=$?

          mkdir -p logs
          rsync -avzr data/repos logs/fedora
          # Clean up mock cache, just in case there is a change for the next run
          mock -r data/dlrn-1.cfg --scrub=all
          exit $ret
        chdir: "{{ ansible_user_dir }}/{{ zuul.projects['softwarefactory-project.io/DLRN'].src_dir }}"
      environment:
        LANG: 'en_US.UTF-8'
