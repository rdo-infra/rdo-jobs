- hosts: all
  name: Autoconverted job legacy-rpmlint from old job gate-rpmlint
  tasks:

    - name: Ensure legacy workspace directory
      file:
        path: '{{ ansible_user_dir }}/workspace'
        state: directory

    - shell:
        cmd: |
          echo "[DEBUG]: JJB template name: {template-name}"

          # If this is called in a periodic job, these will not be set
          echo "Use default for ZUUL_BRANCH and ZUUL_REF if needed"
          export ZUUL_BRANCH=${ZUUL_BRANCH:-master}
          export ZUUL_REF=${ZUUL_REF:-None}

          # In the post pipeline ZUUL_REF is master but does not behave as we want
          # So fall back on None
          [ "$ZUUL_REF" = "master" ] && ZUUL_REF=None
          echo "Clean workspace"
          rm -Rf ./*

          echo "Clone $ZUUL_PROJECT"
          # zuul-cloner is installed as /usr/zuul-env/bin/zuul-cloner
          # in upstream images
          export PATH=$PATH:/usr/zuul-env/bin

          # Note (dmsimard): If we are running for a periodic job, there is no
          # incentive in using Zuul cloner because the jobs are not going to
          # potentially depend on things from the zuul context (ex: depends-on)
          # The zuul git namespace (where the job was triggered from) is also
          # wonky for periodic jobs. A periodic pipeline targetted at an
          # upstream project would still end up trying to clone from review.rdo.
          # This should be revisited in Zuul v3 which is supposedly not a
          # problem

          # We can receive reviews from review.openstack.org.
          # Builds that are run as third party for review.o.o are in the Zuul
          # pipelines prefixed by "openstack-".
          GIT_SOURCE="https://review.rdoproject.org/r"
          if [[ "${ZUUL_PIPELINE}" =~ "openstack-" ]]; then
              GIT_SOURCE="https://git.openstack.org"
          fi

          git config --global http.postBuffer 524288000
          git config --global https.postBuffer 524288000

          if [[ "${ZUUL_PIPELINE}" =~ "periodic" ]]; then
          # Note (trown): we need to make sure we clone this to the same
          # location as zuul-cloner will so that manual and periodic jobs
          # can share builders
              git clone --depth=1 $GIT_SOURCE/$ZUUL_PROJECT $ZUUL_PROJECT
          else
              /usr/zuul-env/bin/zuul-cloner -v $GIT_SOURCE $ZUUL_PROJECT
          fi
        chdir: '{{ ansible_user_dir }}/workspace'
      environment: '{{ zuul | zuul_legacy_vars }}'

    - shell:
        cmd: |
          # This builder, when run from a child job of a DLRN based job,
          # configures the DLRN repository that was uploaded as an artifact
          # of the parent DLRN-rpmbuild job.
          # This allows to install the packages in that repository and test
          # them.
          set +ex

          # Re-construct the expected repository URL
          if [[ "${ZUUL_BRANCH}" =~ stable/ ]]; then
              # If the branch is stable/something, we have an additional /
              ZUUL_REF=$(echo ${ZUUL_REF} |cut -f5 -d /)
          else
              ZUUL_REF=$(echo ${ZUUL_REF} |cut -f4 -d /)
          fi

          # This builder can be shared across different DLRN based jobs.
          # Try and find the right one
          jobs="DLRN-rpmbuild rdoinfo-DLRN-check"
          for job in $jobs;
          do
            # Note, LOG_PATH is expected since we reconstruct it inside
            # zuul_functions.py
            LOG_PATH="${BASE_LOG_PATH}/${ZUUL_PIPELINE}/${job}/${ZUUL_REF}"
            logs="https://logs.rdoproject.org/${LOG_PATH}"

            curl -o /dev/null -sIf "${logs}" || continue
            break
          done

          # NOTE(pabelanger): Override logs for zuulv3 jobs.
          if [[ -d /home/zuul ]]; then
              logs={{ buildset_artifacts_url }}
          fi

          # If we could not find a working repository, give up
          curl -o /dev/null -sIf "${logs}" || exit 1

          # Use the latest repository hash
          # If DLRN built multiple packages, there will be multiple repositories.
          # We want the latest repository which contains all of the packages that were just built.
          repository="${logs}/centos/current"

          # The rdoinfo-DLRN-check job may create different repos (centos-rpm-master, centos-pike-rdo)
          # when it builds packages for more than one release. In that case, let us try to find the
          # right one
          curl -o /dev/null -sIf "${repository}"
          if [ $? -ne 0 ]; then
            releases="rpm-master queens-rdo pike-rdo ocata-rdo newton-rdo"
            for release in $releases; do
                repository="${logs}/centos-${release}/current"
                curl -o /dev/null -sIf "${repository}" || continue
                break
            done
          fi

          # If we could not find a working repository, give up
          curl -o /dev/null -sIf "${repository}" || exit 1

          # Configure the repository
          name="delorean-zuul-${ZUUL_REF}"
          sudo bash -c "cat << EOF > /etc/yum.repos.d/${name}.repo
          [${name}]
          name=${name}
          baseurl=${repository}
          enabled=1
          gpgcheck=0
          priority=1
          EOF"
        chdir: '{{ ansible_user_dir }}/workspace'
      environment: '{{ zuul | zuul_legacy_vars }}'

    - shell:
        cmd: |
          # This builder, when run from a child job of a DLRN based
          # job, download the packages built from DLRN and compare
          # rpmlint reports from the previously built packages.

          # install needed packages
          sudo yum install -y rpmlint sqlite wget

          # extract the sha1
          ZUUL_REF=$(echo ${ZUUL_REF} |cut -f4 -d /)

          # must be in sync with the previous builder (dlrn-gate-repository)
          eval $(grep baseurl= < /etc/yum.repos.d/delorean-zuul-${ZUUL_REF}.repo)

          # download binary packages
          wget -e robots=off -nd -r --accept .rpm --reject .src.rpm ${baseurl}
          unset baseurl

          # get the repo data from the previous repository
          URL=https://trunk.rdoproject.org/centos7/current
          eval $(curl $URL/delorean.repo|grep baseurl=)
          wget $baseurl/repodata/repomd.xml

          # extract the name of primary db from repomd.xml
          db=$(python -c "import xml.etree.ElementTree as et; ns = {'ns0': 'http://linux.duke.edu/metadata/repo'}; print(et.parse('repomd.xml').getroot().find('ns0:data[@type=\"primary_db\"]/ns0:location', ns).attrib['href'])")

          # download this db to get the name of the rpm files
          wget $baseurl/$db

          db=$(basename $db .bz2)
          bunzip2 $db.bz2

          # our rpmlint config
          cat > $HOME/.rpmlintrc <<EOF
          from Config import *

          addFilter("no-changelogname-tag")
          addFilter("no-manual-page-for-binary")
          addFilter("no-documentation")
          addFilter("non-readable")

          # vitrage-ui exceptions
          addFilter("openstack-vitrage-ui.noarch: W: non-conffile-in-etc /etc/openstack-dashboard/enabled/_4140_admin_template_vitrage_panel.py.*")

          # ironic exceptions
          addFilter("openstack-ironic-common.noarch: E: non-standard-dir-perm /var/log/ironic 0?750L?")
          addFilter("python-ironic-tests.noarch: E: wrong-script-interpreter /usr/lib/python2.7/site-packages/ironic/tests/.* ipxe")
          addFilter("python-ironic-tests.noarch: E: non-executable-script /usr/lib/python2.7/site-packages/ironic/tests/.* 0?644L? ipxe")

          # Exceptions for nova
          addFilter("openstack-nova-common.noarch: W: obsolete-not-provided openstack-nova-cert")
          addFilter("python-novajoin.noarch: W: non-standard-gid")
          addFilter("python-novajoin.noarch: W: non-standard-uid")
          addFilter("openstack-nova-compute.noarch: E: explicit-lib-dependency libvirt-client")

          # Exception for tackerclient
          addFilter("python-tackerclient-doc.noarch: W: file-not-utf8 /usr/share/doc/python-tackerclient-doc-.*/html/objects.inv")

          # Exception for congress
          addFilter("openstack-congress-common.noarch: E: non-standard-dir-perm /etc/congress/keys 0?750L?")

          # Exception for mistral
          addFilter("python-mistral.noarch: W: self-obsoletion python-openstack-mistral < 5.0.0-1 obsoletes python-openstack-mistral.*")
          addFilter("openstack-mistral-common.noarch: E: non-standard-dir-perm /var/lib/mistral 0?750L?")

          # Exception for cloudkitty
          addFilter("openstack-cloudkitty-common.noarch: E: non-standard-dir-perm /var/log/cloudkitty 0750L?")

          # Exception for puppet-tripleo
          addFilter("puppet-tripleo.noarch: E: explicit-lib-dependency puppet-openstacklib")
          addFilter("puppet-tripleo.noarch: E: explicit-lib-dependency puppet-stdlib")
          addFilter("puppet-tripleo.noarch: E: non-executable-script /usr/share/openstack-puppet/modules/tripleo/templates/redis/redis-notifications.sh.erb 0644L /bin/bash")

          # Exceptions for glance
          addFilter("openstack-glance.noarch: E: non-standard-dir-perm /var/log/glance 0?750L?")
          # The dangling-symlink exclusions are related to files from
          # python-glance-store and python-os-brick.
          addFilter("openstack-glance.noarch: W: dangling-symlink /etc/glance/rootwrap.d/glance_cinder_store.filters /usr/share/glance_store/glance_cinder_store.filters")
          addFilter("openstack-glance.noarch: W: dangling-symlink /etc/glance/rootwrap.d/os-brick.filters /usr/share/os-brick/rootwrap/os-brick.filters")

          # Exceptions for puppet-ceph
          addFilter("puppet-ceph.noarch: E: explicit-lib-dependency puppet-openstacklib")
          addFilter("puppet-ceph.noarch: E: explicit-lib-dependency puppet-stdlib")
          addFilter("puppet-ceph.noarch: E: non-executable-script /usr/share/openstack-puppet/modules/ceph/setup.py 0644L /usr/bin/env")

          # Exceptions for horizon
          addFilter("python-django-horizon.noarch: E: non-executable-script /usr/lib/python2.7/site-packages/openstack_auth/tests/run_tests.py 0644L /usr/bin/env")
          addFilter("python-django-horizon.noarch: E: zero-length /usr/lib/python2.7/site-packages/openstack_auth/tests/models.py")
          addFilter("python-django-horizon.noarch: E: zero-length /usr/lib/python2.7/site-packages/openstack_auth/tests/templates/auth/blank.html")

          # Exceptions for ceilometer
          addFilter("openstack-ceilometer-common.noarch: W: obsolete-not-provided openstack-ceilometer-api")

          # Exceptions for kuryr
          # Following error only-non-binary-in-usr-lib has been fixed in recent rpmlint versions not in CentOS yet.
          addFilter("openstack-kuryr-kubernetes-cni.noarch: W: only-non-binary-in-usr-lib")

          # Exceptions for heat
          addFilter("openstack-heat-common.noarch: W: obsolete-not-provided openstack-heat-api-cloudwatch")

          # Exceptions for telemetry-tempest-plugin
          addFilter("python2-telemetry-tests-tempest.noarch: E: zero-length /usr/lib/python2.7/site-packages/telemetry_tempest_plugin/gnocchi/__init_.py")
          addFilter("\w+.*-tests-tempest.noarch: W: obsolete-not-provided \w+.*-tests")

          # Exceptions for os-xenapi
          addFilter("python2-os-xenapi.noarch: E: non-executable-script /usr/lib/python2.7/site-packages/os_xenapi/utils/himn.py 0644L /usr/bin/env")
          addFilter("python2-os-xenapi.noarch: E: non-executable-script /usr/lib/python2.7/site-packages/os_xenapi/utils/iptables.py 0644L /usr/bin/env")
          addFilter("python2-os-xenapi.noarch: E: non-executable-script /usr/lib/python2.7/site-packages/os_xenapi/utils/shell_tools/install_conntrack.sh 0644L /bin/bash")
          addFilter("python2-os-xenapi.noarch: E: non-executable-script /usr/lib/python2.7/site-packages/os_xenapi/utils/xapi_plugin.py 0644L /usr/bin/env")
          addFilter("python2-os-xenapi.noarch: E: non-executable-script /usr/lib/python2.7/site-packages/os_xenapi/utils/xenapi_facts.py 0644L /usr/bin/env")

          EOF

          # now download all these packages from the previous repository
          mkdir -p old
          for fname in $(ls *.rpm); do
              name=$(rpm -qp --qf '%{NAME}\n' $fname)

              eval $(sqlite3 -line $db "select location_href as pkgfile from packages where name = '$name' and arch != 'src';"|sed 's/ //g')

              # if there is no previous package, it means that is new
              # packages so just run rpmlint on the packages and exit
              if [ -z "$pkgfile" ]; then
                  rpmlint *.rpm | tee rpmlint.new.txt
                  exit 0
              fi

              curl -o old/$pkgfile $baseurl/$pkgfile
          done

          # run rpmlint on old and new packages
          rpmlint *.rpm | sort | tee rpmlint.new.txt
          rpmlint old/*.rpm | sort | tee rpmlint.old.txt

          # check that we have the same number of packages else we
          # cannot really compare and we just exit gracefully
          if [ $(ls *.rpm|wc -l) != $(ls old/*.rpm|wc -l) ]; then
              exit 0
          fi

          # compare if we have more reports with the new packages
          if [ $(wc -l < rpmlint.new.txt) -gt $(wc -l < rpmlint.old.txt) ]; then
              diff -u rpmlint.old.txt rpmlint.new.txt
              exit 1
          fi
        chdir: '{{ ansible_user_dir }}/workspace'
      environment: '{{ zuul | zuul_legacy_vars }}'
