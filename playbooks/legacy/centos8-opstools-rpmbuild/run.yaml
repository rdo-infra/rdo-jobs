---
- hosts: all
  name: Autoconverted job legacy-centos-opstools-rpmbuild from old job centos-opstools-rpmbuild
  tasks:

    - name: Ensure legacy workspace directory
      file:
        path: '{{ ansible_user_dir }}/workspace'
        state: directory

    - name: cloning
      shell:
        cmd: |
          echo "[DEBUG]: JJB template name: {template-name}"

          # If this is called in a periodic job, these will not be set
          echo "Use default for ZUUL_BRANCH and ZUUL_REF if needed"
          export ZUUL_BRANCH=${ZUUL_BRANCH:-master}
          export ZUUL_REF=${ZUUL_REF:-None}

          # In the post pipeline ZUUL_REF is master but does not behave as we want
          # So fall back on None
          [ "$ZUUL_REF" = "master" ] && ZUUL_REF=None
          echo "Clean workspace"
          rm -Rf ./*

          echo "Clone $ZUUL_PROJECT"
          # zuul-cloner is installed as /usr/zuul-env/bin/zuul-cloner
          # in upstream images
          export PATH=$PATH:/usr/zuul-env/bin

          # Note (dmsimard): If we are running for a periodic job, there is no
          # incentive in using Zuul cloner because the jobs are not going to
          # potentially depend on things from the zuul context (ex: depends-on)
          # The zuul git namespace (where the job was triggered from) is also
          # wonky for periodic jobs. A periodic pipeline targetted at an
          # upstream project would still end up trying to clone from review.rdo.
          # This should be revisited in Zuul v3 which is supposedly not a
          # problem

          # We can receive reviews from review.openstack.org.
          # Builds that are run as third party for review.o.o are in the Zuul
          # pipelines prefixed by "openstack-".
          GIT_SOURCE="https://review.rdoproject.org/r"
          if [[ "${ZUUL_PIPELINE}" =~ "openstack-" ]]; then
              GIT_SOURCE="https://opendev.org"
          fi

          git config --global http.postBuffer 524288000
          git config --global https.postBuffer 524288000

          if [[ "${ZUUL_PIPELINE}" =~ "periodic" ]]; then
          # Note (trown): we need to make sure we clone this to the same
          # location as zuul-cloner will so that manual and periodic jobs
          # can share builders
              git clone --depth=1 $GIT_SOURCE/$ZUUL_PROJECT $ZUUL_PROJECT
          else
              /usr/zuul-env/bin/zuul-cloner -v $GIT_SOURCE $ZUUL_PROJECT
          fi
        chdir: '{{ ansible_user_dir }}/workspace'
      environment: '{{ zuul | zuul_legacy_vars }}'

    - name: dnf update
      shell:
        cmd: |
          set -e
          mkdir $WORKSPACE/logs
          sudo dnf -y install rpm-build rpmdevtools centos-release-opstools
          sudo dnf -y groupinstall "Development Tools"
          cat << EOF | sudo tee /etc/yum.repos.d/opstools-build.repo
          [centos-opstools-collectd-5-testing]
          name=CentOS-8 - OpsTools collectd-5 - testing repo
          baseurl=https://buildlogs.centos.org/centos/\$releasever/opstools/\$basearch/collectd-5
          gpgcheck=0
          enabled=1

          [centos-messaging-qpid-proton-testing]
          name=CentOS-8 - Messaging QPID proton - testing repo
          baseurl=https://buildlogs.centos.org/centos/\$releasever/messaging/\$basearch/qpid-proton
          gpgcheck=0
          enabled=1

          [centos-cloud]
          name=CentOS-8 - OpenStack Train testing repository
          baseurl=https://buildlogs.centos.org/centos/\$releasever/cloud/\$basearch/openstack-train/
          gpgcheck=0
          enabled=1
          EOF

          sudo dnf -y update
          pushd $ZUUL_PROJECT
          base=`basename $ZUUL_PROJECT`
          if [ -f "$base.spec" ]; then
             specfile="$base.spec"
          else
             num_spec=`ls -l *.spec | wc -l`
             if [ ${num_spec} -eq 1 ]; then
               specfile=`ls *.spec`
             else
               echo "** ERROR: There are more than one spec file"
               exit 1
             fi
          fi
          spectool -g  "$specfile"
          sudo yum-builddep -y "$specfile"
          rpmbuild -D '_sourcedir '$PWD -D '_specdir '$PWD -D '_topdir '$PWD -ba "$specfile"
          # move built rpms to logs for later use
          mv SRPMS/* $WORKSPACE/logs
          mv RPMS/* $WORKSPACE/logs
          popd
        chdir: '{{ ansible_user_dir }}/workspace'
      environment: '{{ zuul | zuul_legacy_vars }}'
