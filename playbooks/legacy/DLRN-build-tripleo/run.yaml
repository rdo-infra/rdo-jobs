- hosts: all
  name: Autoconverted job legacy-DLRN-build-tripleo from old job DLRN-build-tripleo
  tasks:

    - name: Ensure legacy workspace directory
      file:
        path: '{{ ansible_user_dir }}/workspace'
        state: directory

    - shell:
        cmd: |
          echo "[DEBUG]: JJB template name: {template-name}"

          # If this is called in a periodic job, these will not be set
          echo "Use default for ZUUL_BRANCH and ZUUL_REF if needed"
          export ZUUL_BRANCH=${ZUUL_BRANCH:-master}
          export ZUUL_REF=${ZUUL_REF:-None}

          # In the post pipeline ZUUL_REF is master but does not behave as we want
          # So fall back on None
          [ "$ZUUL_REF" = "master" ] && ZUUL_REF=None
          echo "Clean workspace"
          rm -Rf ./*

          echo "Clone $ZUUL_PROJECT"
          # zuul-cloner is installed as /usr/zuul-env/bin/zuul-cloner
          # in upstream images
          export PATH=$PATH:/usr/zuul-env/bin

          # Note (dmsimard): If we are running for a periodic job, there is no
          # incentive in using Zuul cloner because the jobs are not going to
          # potentially depend on things from the zuul context (ex: depends-on)
          # The zuul git namespace (where the job was triggered from) is also
          # wonky for periodic jobs. A periodic pipeline targetted at an
          # upstream project would still end up trying to clone from review.rdo.
          # This should be revisited in Zuul v3 which is supposedly not a
          # problem

          # We can receive reviews from review.openstack.org.
          # Builds that are run as third party for review.o.o are in the Zuul
          # pipelines prefixed by "openstack-".
          GIT_SOURCE="https://review.rdoproject.org/r"
          if [[ "${ZUUL_PIPELINE}" =~ "openstack-" ]]; then
              GIT_SOURCE="https://git.openstack.org"
          fi

          git config --global http.postBuffer 524288000
          git config --global https.postBuffer 524288000

          if [[ "${ZUUL_PIPELINE}" =~ "periodic" ]]; then
          # Note (trown): we need to make sure we clone this to the same
          # location as zuul-cloner will so that manual and periodic jobs
          # can share builders
              git clone --depth=1 $GIT_SOURCE/$ZUUL_PROJECT $ZUUL_PROJECT
          else
              /usr/zuul-env/bin/zuul-cloner -v $GIT_SOURCE $ZUUL_PROJECT
          fi
        chdir: '{{ ansible_user_dir }}/workspace'
      environment: '{{ zuul | zuul_legacy_vars }}'

    - shell:
        cmd: |
          set +e
          sudo yum -y install createrepo mock redhat-rpm-config rpmdevtools
          sudo usermod -a -G mock jenkins

          # Clone DLRN
          git clone https://github.com/softwarefactory-project/DLRN --depth 1
        chdir: '{{ ansible_user_dir }}/workspace'
      environment: '{{ zuul | zuul_legacy_vars }}'

    - shell:
        cmd: |
          set +e
          # This builder, when run from a child job of a DLRN based job,
          # will rebuild and test installation of a src.rpm, when built
          # using the repository configuration used by Tripleo CI jobs.
          # This ensures that we're not breaking the TripleO gates with a
          # packaging change.

          # Re-construct the expected repository URL
          if [[ "${ZUUL_BRANCH}" =~ stable/ ]]; then
              # If the branch is stable/something, we have an additional /
              ZUUL_REF=$(echo ${ZUUL_REF} |cut -f5 -d /)
          else
              ZUUL_REF=$(echo ${ZUUL_REF} |cut -f4 -d /)
          fi

          # Note, LOG_PATH is expected since we reconstruct it inside
          # zuul_functions.py
          LOG_PATH="${BASE_LOG_PATH}/${ZUUL_PIPELINE}/DLRN-rpmbuild/${ZUUL_REF}"
          logs="https://logs.rdoproject.org/${LOG_PATH}"

          # If we could not find a working repository, give up
          curl -o /dev/null -sIf "${logs}" || exit 1

          # Use the latest repository hash
          # If DLRN built multiple packages, there will be multiple repositories.
          # We want the latest repository which contains all of the packages that were just built.
          repository="${logs}/centos/current"

          # Fetch all src.rpm files, we will rebuild them here
          wget -e robots=off -nd -r --accept .src.rpm $repository

          # Create mock config file
          if [[ "${ZUUL_BRANCH}" =~ rpm- && "${ZUUL_BRANCH}" != "rpm-master" ]]; then
              branch=$(sed "s/rpm-//" <<< "${ZUUL_BRANCH}")
          elif [[ "${ZUUL_BRANCH}" =~ -rdo ]]; then
              branch=$(sed "s/-rdo//" <<< "${ZUUL_BRANCH}")
          else
              branch="master"
          fi
          baseurl="https://trunk.rdoproject.org/centos7-${branch}/"

          # Fetch base mock configuration, we'll update it to match TripleO requirements
          cp DLRN/scripts/centos.cfg .
          # Remove the last line, then add all required repos
          sed -i '$ d' centos.cfg
          # current
          curl -o /tmp/delorean-current.repo  ${baseurl}/current/delorean.repo
          sed -i 's/priority=.*/priority=10/' /tmp/delorean-current.repo
          sed -i 's/\[delorean\]/\[delorean-current\]/' /tmp/delorean-current.repo
          echo >> /tmp/delorean-current.repo
          echo "includepkgs=diskimage-builder,instack,instack-undercloud,os-apply-config,os-collect-config,os-net-config,os-refresh-config,python-tripleoclient*,openstack-tripleo-*,puppet-*" >> /tmp/delorean-current.repo
          cat /tmp/delorean-current.repo >> centos.cfg
          echo >> centos.cfg
          # current-tripleo
          curl -o /tmp/delorean-current-tripleo.repo  ${baseurl}/current-tripleo/delorean.repo
          sed -i 's/priority=.*/priority=20/' /tmp/delorean-current-tripleo.repo
          sed -i 's/\[delorean\]/\[delorean-current-tripleo\]/' /tmp/delorean-current-tripleo.repo
          cat /tmp/delorean-current-tripleo.repo >> centos.cfg
          echo >> centos.cfg
          # deps
          curl ${baseurl}/delorean-deps.repo >> centos.cfg
          echo >> centos.cfg
          echo '"""' >> centos.cfg
          # Build package
          OUTPUT_DIRECTORY="$PWD/build"
          mkdir $OUTPUT_DIRECTORY
          MOCKOPTS="-v -r centos.cfg --resultdir $OUTPUT_DIRECTORY"
          ret=0
          /usr/bin/mock ${MOCKOPTS} --rebuild *.src.rpm 2>&1
          RC_BUILD=$?
          if [ $RC_BUILD -ne 0 ]; then
            ret=$RC_BUILD
          else
            /usr/bin/mock ${MOCKOPTS} --install $OUTPUT_DIRECTORY/*rpm 2>&1
             RC_INSTALL=$?
             if [ $RC_INSTALL -ne 0 ]; then
                 ret=$RC_INSTALL
             fi
          fi
          # Retrieve logs/repositories/packages
          mkdir logs
          cp -a ${OUTPUT_DIRECTORY}/* logs/
          exit $ret
        chdir: '{{ ansible_user_dir }}/workspace'
      environment: '{{ zuul | zuul_legacy_vars }}'
