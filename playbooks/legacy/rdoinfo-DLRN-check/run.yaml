- hosts: all
  name: Autoconverted job legacy-rdoinfo-DLRN-check from old job rdoinfo-DLRN-check
  tasks:

    - name: Ensure legacy workspace directory
      file:
        path: '{{ ansible_user_dir }}/workspace'
        state: directory

    - name: Copy rdoinfo-DLRN.sh script
      copy:
        src: rdoinfo-DLRN.sh
        dest: '{{ ansible_user_dir }}/rdoinfo-DLRN.sh'
        owner: '{{ ansible_user }}'
        group: '{{ ansible_user }}'
        mode: 0755

    - name: cloning
      shell:
        cmd: |
          echo "[DEBUG]: JJB template name: {template-name}"

          # If this is called in a periodic job, these will not be set
          echo "Use default for ZUUL_BRANCH and ZUUL_REF if needed"
          export ZUUL_BRANCH=${ZUUL_BRANCH:-master}
          export ZUUL_REF=${ZUUL_REF:-None}

          # In the post pipeline ZUUL_REF is master but does not behave as we want
          # So fall back on None
          [ "$ZUUL_REF" = "master" ] && ZUUL_REF=None
          echo "Clean workspace"
          rm -Rf ./*

          echo "Clone $ZUUL_PROJECT"
          # zuul-cloner is installed as /usr/zuul-env/bin/zuul-cloner
          # in upstream images
          export PATH=$PATH:/usr/zuul-env/bin

          # Note (dmsimard): If we are running for a periodic job, there is no
          # incentive in using Zuul cloner because the jobs are not going to
          # potentially depend on things from the zuul context (ex: depends-on)
          # The zuul git namespace (where the job was triggered from) is also
          # wonky for periodic jobs. A periodic pipeline targetted at an
          # upstream project would still end up trying to clone from review.rdo.
          # This should be revisited in Zuul v3 which is supposedly not a
          # problem

          # We can receive reviews from review.openstack.org.
          # Builds that are run as third party for review.o.o are in the Zuul
          # pipelines prefixed by "openstack-".
          GIT_SOURCE="https://review.rdoproject.org/r"
          if [[ "${ZUUL_PIPELINE}" =~ "openstack-" ]]; then
              GIT_SOURCE="https://git.openstack.org"
          fi

          git config --global http.postBuffer 524288000
          git config --global https.postBuffer 524288000

          if [[ "${ZUUL_PIPELINE}" =~ "periodic" ]]; then
          # Note (trown): we need to make sure we clone this to the same
          # location as zuul-cloner will so that manual and periodic jobs
          # can share builders
              git clone --depth=1 $GIT_SOURCE/$ZUUL_PROJECT $ZUUL_PROJECT
          else
              /usr/zuul-env/bin/zuul-cloner -v $GIT_SOURCE $ZUUL_PROJECT
          fi
        chdir: '{{ ansible_user_dir }}/workspace'
      environment: '{{ zuul | zuul_legacy_vars }}'

    - name: cloning dlrn
      shell: |
          set +e
          sudo yum -y install createrepo mock redhat-rpm-config rpmdevtools
          sudo usermod -a -G mock zuul

          # Clone DLRN
          git clone https://github.com/softwarefactory-project/DLRN --depth 1
      args:
        chdir: '{{ ansible_user_dir }}/workspace'
      environment: '{{ zuul | zuul_legacy_vars }}'

    - name: run dlrn check
      shell:
        cmd: |
          set +e -x
          export LANG=en_US.UTF-8
          pushd $ZUUL_PROJECT
          virtualenv --system-site-packages .venv
          . .venv/bin/activate
          pip install rdopkg

          CURRENT_MASTER_TAG="stein-uc"

          PACKAGES_UPDATED_MASTER=""
          PACKAGES_UPDATED_OCATA=""
          PACKAGES_UPDATED_PIKE=""
          PACKAGES_UPDATED_QUEENS=""
          PACKAGES_UPDATED_ROCKY=""

          TAGS_DIFF=$(rdopkg info-tags-diff .)

          while read line; do
              PKGNAME=$(awk '{print $1}' <<< $line)
              if [[ -n $(echo "$line" | grep -w $CURRENT_MASTER_TAG) ]]; then
                  PACKAGES_UPDATED_MASTER="$PACKAGES_UPDATED_MASTER $PKGNAME"
              fi
              if [[ -n $(echo "$line" | grep -w rocky) ]]; then
                  PACKAGES_UPDATED_ROCKY="$PACKAGES_UPDATED_ROCKY $PKGNAME"
              fi
              if [[ -n $(echo "$line" | grep -w queens) ]]; then
                  PACKAGES_UPDATED_QUEENS="$PACKAGES_UPDATED_QUEENS $PKGNAME"
              fi
              if [[ -n $(echo "$line" | grep -w pike) ]]; then
                  PACKAGES_UPDATED_PIKE="$PACKAGES_UPDATED_PIKE $PKGNAME"
              fi
              if [[ -n $(echo "$line" | grep -w ocata) ]]; then
                  PACKAGES_UPDATED_OCATA="$PACKAGES_UPDATED_OCATA $PKGNAME"
              fi
          done <<< "${TAGS_DIFF}"
          popd

          pushd DLRN
          ret=0
          if [ -n "${PACKAGES_UPDATED_MASTER}" ]; then
              timeout --signal=SIGKILL 10800  {{ ansible_user_dir }}/rdoinfo-DLRN.sh $CURRENT_MASTER_TAG "${PACKAGES_UPDATED_MASTER}"
              ret1=$?
              if [ $ret1 -ne 0 ]; then
                  ret=$ret1
              fi
              # The data/ contents have been archived already, remove to avoid issues with the next branch
              rm -rf data
              sudo rm -rf /var/cache/mock/*
          fi
          if [ -n "${PACKAGES_UPDATED_ROCKY}" ]; then
              timeout --signal=SIGKILL 10800 {{ ansible_user_dir }}/rdoinfo-DLRN.sh rocky "${PACKAGES_UPDATED_ROCKY}"
              ret1=$?
              if [ $ret1 -ne 0 ]; then
                  ret=$ret1
              fi
              # The data/ contents have been archived already, remove to avoid issues with the next branch
              rm -rf data
              sudo rm -rf /var/cache/mock/*
          fi
          if [ -n "${PACKAGES_UPDATED_QUEENS}" ]; then
              timeout --signal=SIGKILL 10800 {{ ansible_user_dir }}/rdoinfo-DLRN.sh queens "${PACKAGES_UPDATED_QUEENS}"
              ret1=$?
              if [ $ret1 -ne 0 ]; then
                  ret=$ret1
              fi
              # The data/ contents have been archived already, remove to avoid issues with the next branch
              rm -rf data
              sudo rm -rf /var/cache/mock/*
          fi
          if [ -n "${PACKAGES_UPDATED_PIKE}" ]; then
              timeout --signal=SIGKILL 10800 {{ ansible_user_dir }}/rdoinfo-DLRN.sh pike "${PACKAGES_UPDATED_PIKE}"
              ret1=$?
              if [ $ret1 -ne 0 ]; then
                  ret=$ret1
              fi
              # The data/ contents have been archived already, remove to avoid issues with the next branch
              rm -rf data
              sudo rm -rf /var/cache/mock/*
          fi
          if [ -n "${PACKAGES_UPDATED_OCATA}" ]; then
              timeout --signal=SIGKILL 10800 {{ ansible_user_dir }}/rdoinfo-DLRN.sh ocata "${PACKAGES_UPDATED_OCATA}"
              ret1=$?
              if [ $ret1 -ne 0 ]; then
                  ret=$ret1
              fi
              # The data/ contents have been archived already, remove to avoid issues with the next branch
              rm -rf data
              sudo rm -rf /var/cache/mock/*
          fi
          popd

          # Retrieve logs/repositories/packages
          mkdir buildset
          cp -a DLRN/logs/* buildset/
          exit $ret
        chdir: '{{ ansible_user_dir }}/workspace'
      environment: '{{ zuul | zuul_legacy_vars }}'
