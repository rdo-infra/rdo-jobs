- hosts: all
  name: Autoconverted job legacy-config-distgit-mirror-github from old job config-distgit-mirror-github
  tasks:

    - name: Ensure legacy workspace directory
      file:
        path: '{{ ansible_user_dir }}/workspace'
        state: directory

    - shell:
        cmd: |
          set -e -x
          if [[ "${ZUUL_PIPELINE}" == "post" ]]; then
          # Source is review.rdoproject.org
          GIT_URL=https://review.rdoproject.org/r
          elif [[ "${ZUUL_PIPELINE}" == "openstack-post" ]]; then
          # Source is git.openstack.org
          GIT_URL=https://git.openstack.org
          fi
          echo "Clean workspace"
          rm -Rf ./*
          echo "Clone $ZUUL_PROJECT"
          git clone ${GIT_URL}/${ZUUL_PROJECT} ${ZUUL_PROJECT}
          # ZUUL_NEWREV is the variable with the commit to be used
          echo "Checking out $ZUUL_NEWREV"
          pushd $ZUUL_PROJECT
          git checkout $ZUUL_NEWREV
          popd
        chdir: '{{ ansible_user_dir }}/workspace'
      environment: '{{ zuul | zuul_legacy_vars }}'

    - shell:
        cmd: |
          set -e +x
          cd $ZUUL_PROJECT
          # Clone the gating_scripts repo, we will need it
          git clone https://review.rdoproject.org/r/rdo_gating_scripts
          pushd rdo_gating_scripts/rdo-create-project
          virtualenv .venv
          . .venv/bin/activate
          pip install -r requirements.txt
          pip install ruamel.yaml
          pip install --upgrade urllib3
          popd
          # Set up git configuration
          git config user.name "rdo-trunk"
          git config user.email "javier.pena@redhat.com"
          git diff --name-only --diff-filter=A HEAD~1 | while read line; do
            # Find new files in the resources directory
            if [[ "$line" =~ resources.* ]]; then
              echo "Parsing new projects in $line"
              python /opt/nodepool-scripts/find-new-distgit-projects.py $line | while read project; do
                  # Remove the initial openstack/ or puppet/ part
                  project_short=$(echo $project | awk -F/ '{print $2}')
                  echo "Creating GitHub project for $project_short"
                  rdo_gating_scripts/rdo-create-project/rdo-create-project-github.py --token $GITHUB_API_KEY --org rdo-packages --skip-deploy-key create --name $project_short
              done
            fi
          done
        chdir: '{{ ansible_user_dir }}/workspace'
      environment: '{{ zuul | zuul_legacy_vars }}'
