---
- hosts: all
  name: DLRN-build-tripleo run playbook
  tasks:
    - name: Install pre-requisites for mock
      package:
        name:
          - createrepo
          - mock
          - redhat-rpm-config
          - rpmdevtools
        state: present
      become: true

    - name: Ensure user in mock group
      user:
        name: "{{ ansible_user }}"
        groups: mock
        append: yes
      become: true

    - name: rebuild and test installation of a src.rpm
      shell:
        cmd: |
          set +e
          # This builder, when run from a child job of a DLRN based job,
          # will rebuild and test installation of a src.rpm, when built
          # using the repository configuration used by Tripleo CI jobs.
          # This ensures that we are not breaking the TripleO gates with a
          # packaging change.
          #

          logs={{ buildset_artifacts_url }}

          # If we could not find a working repository, give up
          curl -o /dev/null -sIf "${logs}" || exit 1

          # Use the latest repository hash
          # If DLRN built multiple packages, there will be multiple repositories.
          # We want the latest repository which contains all of the packages that were just built.
          repository="${logs}/centos/current"

          # Fetch all src.rpm files, we will rebuild them here
          wget -e robots=off -nd -r --accept .src.rpm $repository

          # Create mock config file
          if [[ "{{ zuul.branch }}" =~ -rdo ]]; then
              branch=$(sed "s/-rdo//" <<< "{{ zuul.branch }}")
          else
              branch="master"
          fi
          baseurl="https://trunk.rdoproject.org/centos7-${branch}/"

          # Fetch base mock configuration, we will update it to match TripleO requirements
          cp "{{ ansible_user_dir }}/{{ zuul.projects['softwarefactory-project.io/DLRN'].src_dir }}/scripts/centos.cfg" .
          # Remove the last line, then add all required repos
          sed -i '$ d' centos.cfg
          # current
          curl -o /tmp/delorean-current.repo  ${baseurl}/current/delorean.repo
          sed -i 's/priority=.*/priority=10/' /tmp/delorean-current.repo
          sed -i 's/\[delorean\]/\[delorean-current\]/' /tmp/delorean-current.repo
          echo >> /tmp/delorean-current.repo
          echo "includepkgs=ansible-role-container-registry,ansible-role-tripleo*,ansible-tripleo-ipsec,diskimage-builder,\
          instack,instack-undercloud,os-apply-config,os-collect-config,os-net-config,os-refresh-config,openstack-tripleo-*,\
          python*-tripleo*,puppet-*,python*-paunch*" >> /tmp/delorean-current.repo
          cat /tmp/delorean-current.repo >> centos.cfg
          echo >> centos.cfg
          # current-tripleo
          curl -o /tmp/delorean-current-tripleo.repo  ${baseurl}/current-tripleo/delorean.repo
          sed -i 's/priority=.*/priority=20/' /tmp/delorean-current-tripleo.repo
          sed -i 's/\[delorean\]/\[delorean-current-tripleo\]/' /tmp/delorean-current-tripleo.repo
          cat /tmp/delorean-current-tripleo.repo >> centos.cfg
          echo >> centos.cfg
          # deps
          curl ${baseurl}/delorean-deps.repo >> centos.cfg
          echo >> centos.cfg
          echo '"""' >> centos.cfg
          # Build package
          OUTPUT_DIRECTORY="$PWD/build"
          mkdir $OUTPUT_DIRECTORY
          MOCKOPTS="-v -r centos.cfg --resultdir $OUTPUT_DIRECTORY"
          ret=0
          /usr/bin/mock ${MOCKOPTS} --rebuild *.src.rpm 2>&1
          RC_BUILD=$?
          if [ $RC_BUILD -ne 0 ]; then
            ret=$RC_BUILD
          else
            sed -i "s/.*chroot_setup_cmd.*/config_opts['chroot_setup_cmd'] = 'install basesystem rpm-build'/" centos.cfg
            /usr/bin/mock ${MOCKOPTS} --disablerepo='*-build-deps' clean 2>&1
            /usr/bin/mock ${MOCKOPTS} --disablerepo='*-build-deps' init 2>&1
            /usr/bin/mock ${MOCKOPTS} --disablerepo='*-build-deps' --install $OUTPUT_DIRECTORY/*rpm 2>&1
             RC_INSTALL=$?
             if [ $RC_INSTALL -ne 0 ]; then
                 ret=$RC_INSTALL
             fi
          fi
          # Retrieve logs/repositories/packages
          mkdir buildset
          cp -a ${OUTPUT_DIRECTORY}/* buildset/
          exit $ret
      changed_when: true
