---
- hosts: all
  vars:
    work_dir: "{{ ansible_user_dir }}/workspace"
  tasks:
    - name: Create container log dir
      file:
        path: "{{ ansible_user_dir }}/zuul-output/logs/logs"
        state: directory
        mode: 0755

    - name: Retrieve built images  # noqa risky-shell-pipe
      ansible.builtin.shell: "podman images | grep {{ cifmw_build_containers_container_name_prefix | default('openstack') }} "
      register: built_images
      become: true
      changed_when: false

    - name: Store built images to containers-built.log
      ansible.builtin.copy:
        content: |
          {%  for item in built_images.stdout_lines %}
          {{ item }}
          {% endfor %}
        dest: "{{ ansible_user_dir }}/zuul-output/logs/logs/containers-built.log"

    - name: Check if we get ci-framework-data basedir
      register: cifmw_state
      ansible.builtin.stat:
        path: "{{ ansible_user_dir }}/ci-framework-data"

    - name: Collect ci-framework-data content of interest
      when:
        - cifmw_state.stat.exists | bool
      block:
        - name: Create ci-framework-data log directory for zuul
          ansible.builtin.file:
            path: "{{ ansible_user_dir }}/zuul-output/logs/ci-framework-data"
            state: directory

        - name: Copy ci-framework interesting files
          ansible.builtin.shell:
            chdir: "{{ ansible_user_dir }}/zuul-output/logs/ci-framework-data"
            cmd: |
              cp -ra {{ ansible_user_dir }}/ci-framework-data/logs . ;
              cp -ra {{ ansible_user_dir }}/ci-framework-data/artifacts . ;

    - name: Collect logs
      args:
        chdir: "{{ ansible_user_dir }}/zuul-output/logs"
      ansible.builtin.shell: |
        set -x
        # Collect installed packages
        sudo {{ ansible_pkg_mgr }} list installed &> installed_pkgs.txt
        # Save some statistics
        df -h &> disk_usage.txt
        # Copy yum repos
        sudo rsync -var --no-links --include 'yum.repos.d/***' --include 'yum.conf' --include 'dnf/***' --exclude='*' /etc/ {{ ansible_user_dir }}/zuul-output/logs || true
        # Copy container config
        sudo rsync -var --no-links /etc/containers/ {{ ansible_user_dir }}/zuul-output/logs || true
        # Copy repo-setup files
        rsync -var --no-links {{ ansible_user_dir }}/repos {{ ansible_user_dir }}/zuul-output/logs || true
      changed_when: true
    - name: Copy files from {{ work_dir }} on node
      include_role:
        name: fetch-output
